!function(e){"undefined"!=typeof exports?e(exports):(window.hljs=e({}),"function"==typeof define&&define.amd&&define("hljs",[],function(){return window.hljs}))}(function(e){function t(e){return e.replace(/&/gm,"&amp;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;")}function r(e){return e.nodeName.toLowerCase()}function n(e,t){var r=e&&e.exec(t);return r&&0==r.index}function a(e){return/no-?highlight|plain|text/.test(e)}function s(e){var t,r,n,s=e.className+" ";if(s+=e.parentNode?e.parentNode.className:"",r=/\blang(?:uage)?-([\w-]+)\b/.exec(s))return N(r[1])?r[1]:"no-highlight";for(s=s.split(/\s+/),t=0,n=s.length;n>t;t++)if(N(s[t])||a(s[t]))return s[t]}function i(e,t){var r,n={};for(r in e)n[r]=e[r];if(t)for(r in t)n[r]=t[r];return n}function c(e){var t=[];return function n(e,a){for(var s=e.firstChild;s;s=s.nextSibling)3==s.nodeType?a+=s.nodeValue.length:1==s.nodeType&&(t.push({event:"start",offset:a,node:s}),a=n(s,a),r(s).match(/br|hr|img|input/)||t.push({event:"stop",offset:a,node:s}));return a}(e,0),t}function o(e,n,a){function s(){return e.length&&n.length?e[0].offset!=n[0].offset?e[0].offset<n[0].offset?e:n:"start"==n[0].event?e:n:e.length?e:n}function i(e){function n(e){return" "+e.nodeName+'="'+t(e.value)+'"'}u+="<"+r(e)+Array.prototype.map.call(e.attributes,n).join("")+">"}function c(e){u+="</"+r(e)+">"}function o(e){("start"==e.event?i:c)(e.node)}for(var l=0,u="",d=[];e.length||n.length;){var p=s();if(u+=t(a.substr(l,p[0].offset-l)),l=p[0].offset,p==e){d.reverse().forEach(c);do o(p.splice(0,1)[0]),p=s();while(p==e&&p.length&&p[0].offset==l);d.reverse().forEach(i)}else"start"==p[0].event?d.push(p[0].node):d.pop(),o(p.splice(0,1)[0])}return u+t(a.substr(l))}function l(e){function t(e){return e&&e.source||e}function r(r,n){return new RegExp(t(r),"m"+(e.cI?"i":"")+(n?"g":""))}function n(a,s){if(!a.compiled){if(a.compiled=!0,a.k=a.k||a.bK,a.k){var c={},o=function(t,r){e.cI&&(r=r.toLowerCase()),r.split(" ").forEach(function(e){var r=e.split("|");c[r[0]]=[t,r[1]?Number(r[1]):1]})};"string"==typeof a.k?o("keyword",a.k):Object.keys(a.k).forEach(function(e){o(e,a.k[e])}),a.k=c}a.lR=r(a.l||/\b\w+\b/,!0),s&&(a.bK&&(a.b="\\b("+a.bK.split(" ").join("|")+")\\b"),a.b||(a.b=/\B|\b/),a.bR=r(a.b),a.e||a.eW||(a.e=/\B|\b/),a.e&&(a.eR=r(a.e)),a.tE=t(a.e)||"",a.eW&&s.tE&&(a.tE+=(a.e?"|":"")+s.tE)),a.i&&(a.iR=r(a.i)),void 0===a.r&&(a.r=1),a.c||(a.c=[]);var l=[];a.c.forEach(function(e){e.v?e.v.forEach(function(t){l.push(i(e,t))}):l.push("self"==e?a:e)}),a.c=l,a.c.forEach(function(e){n(e,a)}),a.starts&&n(a.starts,s);var u=a.c.map(function(e){return e.bK?"\\.?("+e.b+")\\.?":e.b}).concat([a.tE,a.i]).map(t).filter(Boolean);a.t=u.length?r(u.join("|"),!0):{exec:function(){return null}}}}n(e)}function u(e,r,a,s){function i(e,t){for(var r=0;r<t.c.length;r++)if(n(t.c[r].bR,e))return t.c[r]}function c(e,t){if(n(e.eR,t)){for(;e.endsParent&&e.parent;)e=e.parent;return e}return e.eW?c(e.parent,t):void 0}function o(e,t){return!a&&n(t.iR,e)}function p(e,t){var r=v.cI?t[0].toLowerCase():t[0];return e.k.hasOwnProperty(r)&&e.k[r]}function b(e,t,r,n){var a=n?"":w.classPrefix,s='<span class="'+a,i=r?"":"</span>";return s+=e+'">',s+t+i}function f(){if(!x.k)return t(E);var e="",r=0;x.lR.lastIndex=0;for(var n=x.lR.exec(E);n;){e+=t(E.substr(r,n.index-r));var a=p(x,n);a?(B+=a[1],e+=b(a[0],t(n[0]))):e+=t(n[0]),r=x.lR.lastIndex,n=x.lR.exec(E)}return e+t(E.substr(r))}function g(){if(x.sL&&!y[x.sL])return t(E);var e=x.sL?u(x.sL,E,!0,C[x.sL]):d(E);return x.r>0&&(B+=e.r),"continuous"==x.subLanguageMode&&(C[x.sL]=e.top),b(e.language,e.value,!1,!0)}function m(){return void 0!==x.sL?g():f()}function h(e,r){var n=e.cN?b(e.cN,"",!0):"";e.rB?(M+=n,E=""):e.eB?(M+=t(r)+n,E=""):(M+=n,E=r),x=Object.create(e,{parent:{value:x}})}function _(e,r){if(E+=e,void 0===r)return M+=m(),0;var n=i(r,x);if(n)return M+=m(),h(n,r),n.rB?0:r.length;var a=c(x,r);if(a){var s=x;s.rE||s.eE||(E+=r),M+=m();do x.cN&&(M+="</span>"),B+=x.r,x=x.parent;while(x!=a.parent);return s.eE&&(M+=t(r)),E="",a.starts&&h(a.starts,""),s.rE?0:r.length}if(o(r,x))throw new Error('Illegal lexeme "'+r+'" for mode "'+(x.cN||"<unnamed>")+'"');return E+=r,r.length||1}var v=N(e);if(!v)throw new Error('Unknown language: "'+e+'"');l(v);var k,x=s||v,C={},M="";for(k=x;k!=v;k=k.parent)k.cN&&(M=b(k.cN,"",!0)+M);var E="",B=0;try{for(var A,L,$=0;x.t.lastIndex=$,A=x.t.exec(r),A;)L=_(r.substr($,A.index-$),A[0]),$=A.index+L;for(_(r.substr($)),k=x;k.parent;k=k.parent)k.cN&&(M+="</span>");return{r:B,value:M,language:e,top:x}}catch(z){if(-1!=z.message.indexOf("Illegal"))return{r:0,value:t(r)};throw z}}function d(e,r){r=r||w.languages||Object.keys(y);var n={r:0,value:t(e)},a=n;return r.forEach(function(t){if(N(t)){var r=u(t,e,!1);r.language=t,r.r>a.r&&(a=r),r.r>n.r&&(a=n,n=r)}}),a.language&&(n.second_best=a),n}function p(e){return w.tabReplace&&(e=e.replace(/^((<[^>]+>|\t)+)/gm,function(e,t){return t.replace(/\t/g,w.tabReplace)})),w.useBR&&(e=e.replace(/\n/g,"<br>")),e}function b(e,t,r){var n=t?k[t]:r,a=[e.trim()];return e.match(/\bhljs\b/)||a.push("hljs"),-1===e.indexOf(n)&&a.push(n),a.join(" ").trim()}function f(e){var t=s(e);if(!a(t)){var r;w.useBR?(r=document.createElementNS("http://www.w3.org/1999/xhtml","div"),r.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n")):r=e;var n=r.textContent,i=t?u(t,n,!0):d(n),l=c(r);if(l.length){var f=document.createElementNS("http://www.w3.org/1999/xhtml","div");f.innerHTML=i.value,i.value=o(l,c(f),n)}i.value=p(i.value),e.innerHTML=i.value,e.className=b(e.className,t,i.language),e.result={language:i.language,re:i.r},i.second_best&&(e.second_best={language:i.second_best.language,re:i.second_best.r})}}function g(e){w=i(w,e)}function m(){if(!m.called){m.called=!0;var e=document.querySelectorAll("pre code");Array.prototype.forEach.call(e,f)}}function h(){addEventListener("DOMContentLoaded",m,!1),addEventListener("load",m,!1)}function _(t,r){var n=y[t]=r(e);n.aliases&&n.aliases.forEach(function(e){k[e]=t})}function v(){return Object.keys(y)}function N(e){return y[e]||y[k[e]]}var w={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0},y={},k={};return e.highlight=u,e.highlightAuto=d,e.fixMarkup=p,e.highlightBlock=f,e.configure=g,e.initHighlighting=m,e.initHighlightingOnLoad=h,e.registerLanguage=_,e.listLanguages=v,e.getLanguage=N,e.inherit=i,e.IR="[a-zA-Z]\\w*",e.UIR="[a-zA-Z_]\\w*",e.NR="\\b\\d+(\\.\\d+)?",e.CNR="\\b(0[xX][a-fA-F0-9]+|(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BNR="\\b(0b[01]+)",e.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BE={b:"\\\\[\\s\\S]",r:0},e.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[e.BE]},e.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[e.BE]},e.PWM={b:/\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such)\b/},e.C=function(t,r,n){var a=e.inherit({cN:"comment",b:t,e:r,c:[]},n||{});return a.c.push(e.PWM),a.c.push({cN:"doctag",bK:"TODO FIXME NOTE BUG XXX",r:0}),a},e.CLCM=e.C("//","$"),e.CBCM=e.C("/\\*","\\*/"),e.HCM=e.C("#","$"),e.NM={cN:"number",b:e.NR,r:0},e.CNM={cN:"number",b:e.CNR,r:0},e.BNM={cN:"number",b:e.BNR,r:0},e.CSSNM={cN:"number",b:e.NR+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",r:0},e.RM={cN:"regexp",b:/\//,e:/\/[gimuy]*/,i:/\n/,c:[e.BE,{b:/\[/,e:/\]/,r:0,c:[e.BE]}]},e.TM={cN:"title",b:e.IR,r:0},e.UTM={cN:"title",b:e.UIR,r:0},e}),hljs.registerLanguage("coffeescript",function(e){var t={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",reserved:"case default function var void with const let enum export import native __hasProp __extends __slice __bind __indexOf",built_in:"npm require console print module global window document"},r="[A-Za-z$_][0-9A-Za-z$_]*",n={cN:"subst",b:/#\{/,e:/}/,k:t},a=[e.BNM,e.inherit(e.CNM,{starts:{e:"(\\s*/)?",r:0}}),{cN:"string",v:[{b:/'''/,e:/'''/,c:[e.BE]},{b:/'/,e:/'/,c:[e.BE]},{b:/"""/,e:/"""/,c:[e.BE,n]},{b:/"/,e:/"/,c:[e.BE,n]}]},{cN:"regexp",v:[{b:"///",e:"///",c:[n,e.HCM]},{b:"//[gim]*",r:0},{b:/\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/}]},{cN:"property",b:"@"+r},{b:"`",e:"`",eB:!0,eE:!0,sL:"javascript"}];n.c=a;var s=e.inherit(e.TM,{b:r}),i="(\\(.*\\))?\\s*\\B[-=]>",c={cN:"params",b:"\\([^\\(]",rB:!0,c:[{b:/\(/,e:/\)/,k:t,c:["self"].concat(a)}]};return{aliases:["coffee","cson","iced"],k:t,i:/\/\*/,c:a.concat([e.C("###","###"),e.HCM,{cN:"function",b:"^\\s*"+r+"\\s*=\\s*"+i,e:"[-=]>",rB:!0,c:[s,c]},{b:/[:\(,=]\s*/,r:0,c:[{cN:"function",b:i,e:"[-=]>",rB:!0,c:[c]}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:!0,i:/[:="\[\]]/,c:[s]},s]},{cN:"attribute",b:r+":",e:":",rB:!0,rE:!0,r:0}])}}),hljs.registerLanguage("cpp",function(e){var t={cN:"keyword",b:"[a-z\\d_]*_t"},r={keyword:"false int float while private char catch export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using true class asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept nullptr static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong",built_in:"std string cin cout cerr clog stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf"};return{aliases:["c","cc","h","c++","h++","hpp"],k:r,i:"</",c:[t,e.CLCM,e.CBCM,{cN:"string",v:[e.inherit(e.QSM,{b:'((u8?|U)|L)?"'}),{b:'(u8?|U)?R"',e:'"',c:[e.BE]},{b:"'\\\\?.",e:"'",i:"."}]},{cN:"number",b:"\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"},e.CNM,{cN:"preprocessor",b:"#",e:"$",k:"if else elif endif define undef warning error line pragma",c:[{b:/\\\n/,r:0},{b:'include\\s*[<"]',e:'[>"]',k:"include",i:"\\n"},e.CLCM]},{b:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",e:">",k:r,c:["self",t]},{b:e.IR+"::",k:r},{bK:"new throw return else",r:0},{cN:"function",b:"("+e.IR+"\\s+)+"+e.IR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:r,c:[{b:e.IR+"\\s*\\(",rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,k:r,r:0,c:[e.CBCM]},e.CLCM,e.CBCM]}]}}),hljs.registerLanguage("python",function(e){var t={cN:"prompt",b:/^(>>>|\.\.\.) /},r={cN:"string",c:[e.BE],v:[{b:/(u|b)?r?'''/,e:/'''/,c:[t],r:10},{b:/(u|b)?r?"""/,e:/"""/,c:[t],r:10},{b:/(u|r|ur)'/,e:/'/,r:10},{b:/(u|r|ur)"/,e:/"/,r:10},{b:/(b|br)'/,e:/'/},{b:/(b|br)"/,e:/"/},e.ASM,e.QSM]},n={cN:"number",r:0,v:[{b:e.BNR+"[lLjJ]?"},{b:"\\b(0o[0-7]+)[lLjJ]?"},{b:e.CNR+"[lLjJ]?"}]},a={cN:"params",b:/\(/,e:/\)/,c:["self",t,n,r]};return{aliases:["py","gyp"],k:{keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda nonlocal|10 None True False",built_in:"Ellipsis NotImplemented"},i:/(<\/|->|\?)/,c:[t,n,r,e.HCM,{v:[{cN:"function",bK:"def",r:10},{cN:"class",bK:"class"}],e:/:/,i:/[${=;\n,]/,c:[e.UTM,a]},{cN:"decorator",b:/@/,e:/$/},{b:/\b(print|exec)\(/}]}}),hljs.registerLanguage("sql",function(e){var t=e.C("--","$");return{cI:!0,i:/[<>]/,c:[{cN:"operator",bK:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate savepoint release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke",e:/;/,eW:!0,k:{keyword:"abs absolute acos action add adddate addtime aes_decrypt aes_encrypt after aggregate all allocate alter analyze and any are as asc ascii asin assertion at atan atan2 atn2 authorization authors avg backup before begin benchmark between bin binlog bit_and bit_count bit_length bit_or bit_xor both by cache call cascade cascaded case cast catalog ceil ceiling chain change changed char_length character_length charindex charset check checksum checksum_agg choose close coalesce coercibility collate collation collationproperty column columns columns_updated commit compress concat concat_ws concurrent connect connection connection_id consistent constraint constraints continue contributors conv convert convert_tz corresponding cos cot count count_big crc32 create cross cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime data database databases datalength date_add date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts datetimeoffsetfromparts day dayname dayofmonth dayofweek dayofyear deallocate declare decode default deferrable deferred degrees delayed delete des_decrypt des_encrypt des_key_file desc describe descriptor diagnostics difference disconnect distinct distinctrow div do domain double drop dumpfile each else elt enclosed encode encrypt end end-exec engine engines eomonth errors escape escaped event eventdata events except exception exec execute exists exp explain export_set extended external extract fast fetch field fields find_in_set first first_value floor flush for force foreign format found found_rows from from_base64 from_days from_unixtime full function get get_format get_lock getdate getutcdate global go goto grant grants greatest group group_concat grouping grouping_id gtid_subset gtid_subtract handler having help hex high_priority hosts hour ident_current ident_incr ident_seed identified identity if ifnull ignore iif ilike immediate in index indicator inet6_aton inet6_ntoa inet_aton inet_ntoa infile initially inner innodb input insert install instr intersect into is is_free_lock is_ipv4 is_ipv4_compat is_ipv4_mapped is_not is_not_null is_used_lock isdate isnull isolation join key kill language last last_day last_insert_id last_value lcase lead leading least leaves left len lenght level like limit lines ln load load_file local localtime localtimestamp locate lock log log10 log2 logfile logs low_priority lower lpad ltrim make_set makedate maketime master master_pos_wait match matched max md5 medium merge microsecond mid min minute mod mode module month monthname mutex name_const names national natural nchar next no no_write_to_binlog not now nullif nvarchar oct octet_length of old_password on only open optimize option optionally or ord order outer outfile output pad parse partial partition password patindex percent_rank percentile_cont percentile_disc period_add period_diff pi plugin position pow power pragma precision prepare preserve primary prior privileges procedure procedure_analyze processlist profile profiles public publishingservername purge quarter query quick quote quotename radians rand read references regexp relative relaylog release release_lock rename repair repeat replace replicate reset restore restrict return returns reverse revoke right rlike rollback rollup round row row_count rows rpad rtrim savepoint schema scroll sec_to_time second section select serializable server session session_user set sha sha1 sha2 share show sign sin size slave sleep smalldatetimefromparts snapshot some soname soundex sounds_like space sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sql_variant_property sqlstate sqrt square start starting status std stddev stddev_pop stddev_samp stdev stdevp stop str str_to_date straight_join strcmp string stuff subdate substr substring subtime subtring_index sum switchoffset sysdate sysdatetime sysdatetimeoffset system_user sysutcdatetime table tables tablespace tan temporary terminated tertiary_weights then time time_format time_to_sec timediff timefromparts timestamp timestampadd timestampdiff timezone_hour timezone_minute to to_base64 to_days to_seconds todatetimeoffset trailing transaction translation trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse ucase uncompress uncompressed_length unhex unicode uninstall union unique unix_timestamp unknown unlock update upgrade upped upper usage use user user_resources using utc_date utc_time utc_timestamp uuid uuid_short validate_password_strength value values var var_pop var_samp variables variance varp version view warnings week weekday weekofyear weight_string when whenever where with work write xml xor year yearweek zon",literal:"true false null",built_in:"array bigint binary bit blob boolean char character date dec decimal float int integer interval number numeric real serial smallint varchar varying int8 serial8 text"},c:[{cN:"string",b:"'",e:"'",c:[e.BE,{b:"''"}]},{cN:"string",b:'"',e:'"',c:[e.BE,{b:'""'}]},{cN:"string",b:"`",e:"`",c:[e.BE]},e.CNM,e.CBCM,t]},e.CBCM,t]}}),hljs.registerLanguage("java",function(e){var t=e.UIR+"(<"+e.UIR+">)?",r="false synchronized int abstract float private char boolean static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private",n="\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",a={cN:"number",b:n,r:0};return{aliases:["jsp"],k:r,i:/<\//,c:[e.C("/\\*\\*","\\*/",{r:0,c:[{cN:"doctag",b:"@[A-Za-z]+"}]}),e.CLCM,e.CBCM,e.ASM,e.QSM,{cN:"class",bK:"class interface",e:/[{;=]/,eE:!0,k:"class interface",i:/[:"\[\]]/,c:[{bK:"extends implements"},e.UTM]},{bK:"new throw return else",r:0},{cN:"function",b:"("+t+"\\s+)+"+e.UIR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:r,c:[{b:e.UIR+"\\s*\\(",rB:!0,r:0,c:[e.UTM]},{cN:"params",b:/\(/,e:/\)/,k:r,r:0,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]},a,{cN:"annotation",b:"@[A-Za-z]+"}]}}),hljs.registerLanguage("ruby",function(e){var t="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",r="and false then defined module in return redo if BEGIN retry end for true self when next until do begin unless END rescue nil else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",n={cN:"doctag",b:"@[A-Za-z]+"},a={cN:"value",b:"#<",e:">"},s=[e.C("#","$",{c:[n]}),e.C("^\\=begin","^\\=end",{c:[n],r:10}),e.C("^__END__","\\n$")],i={cN:"subst",b:"#\\{",e:"}",k:r},c={cN:"string",c:[e.BE,i],v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:/`/,e:/`/},{b:"%[qQwWx]?\\(",e:"\\)"},{b:"%[qQwWx]?\\[",e:"\\]"},{b:"%[qQwWx]?{",e:"}"},{b:"%[qQwWx]?<",e:">"},{b:"%[qQwWx]?/",e:"/"},{b:"%[qQwWx]?%",e:"%"},{b:"%[qQwWx]?-",e:"-"},{b:"%[qQwWx]?\\|",e:"\\|"},{b:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/}]},o={cN:"params",b:"\\(",e:"\\)",k:r},l=[c,a,{cN:"class",bK:"class module",e:"$|;",i:/=/,c:[e.inherit(e.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{cN:"inheritance",b:"<\\s*",c:[{cN:"parent",b:"("+e.IR+"::)?"+e.IR}]}].concat(s)},{cN:"function",bK:"def",e:" |$|;",r:0,c:[e.inherit(e.TM,{b:t}),o].concat(s)},{cN:"constant",b:"(::)?(\\b[A-Z]\\w*(::)?)+",r:0},{cN:"symbol",b:e.UIR+"(\\!|\\?)?:",r:0},{cN:"symbol",b:":",c:[c,{b:t}],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{b:"("+e.RSR+")\\s*",c:[a,{cN:"regexp",c:[e.BE,i],i:/\n/,v:[{b:"/",e:"/[a-z]*"},{b:"%r{",e:"}[a-z]*"},{b:"%r\\(",e:"\\)[a-z]*"},{b:"%r!",e:"![a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}].concat(s),r:0}].concat(s);i.c=l,o.c=l;var u="[>?]>",d="[\\w#]+\\(\\w+\\):\\d+:\\d+>",p="(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",b=[{b:/^\s*=>/,cN:"status",starts:{e:"$",c:l}},{cN:"prompt",b:"^("+u+"|"+d+"|"+p+")",starts:{e:"$",c:l}}];return{aliases:["rb","gemspec","podspec","thor","irb"],k:r,c:s.concat(b).concat(l)}}),hljs.registerLanguage("objectivec",function(e){var t={cN:"built_in",b:"(AV|CA|CF|CG|CI|MK|MP|NS|UI)\\w+"},r={keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},n=/[a-zA-Z@][a-zA-Z0-9_]*/,a="@interface @class @protocol @implementation";return{aliases:["mm","objc","obj-c"],k:r,l:n,i:"</",c:[t,e.CLCM,e.CBCM,e.CNM,e.QSM,{cN:"string",v:[{b:'@"',e:'"',i:"\\n",c:[e.BE]},{b:"'",e:"[^\\\\]'",i:"[^\\\\][^']"}]},{cN:"preprocessor",b:"#",e:"$",c:[{cN:"title",v:[{b:'"',e:'"'},{b:"<",e:">"}]}]},{cN:"class",b:"("+a.split(" ").join("|")+")\\b",e:"({|$)",eE:!0,k:a,l:n,c:[e.UTM]},{cN:"variable",b:"\\."+e.UIR,r:0}]}}),hljs.registerLanguage("javascript",function(e){return{aliases:["js"],k:{keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},c:[{cN:"pi",r:10,b:/^\s*['"]use (strict|asm)['"]/},e.ASM,e.QSM,{cN:"string",b:"`",e:"`",c:[e.BE,{cN:"subst",b:"\\$\\{",e:"\\}"}]},e.CLCM,e.CBCM,{cN:"number",v:[{b:"\\b(0[bB][01]+)"},{b:"\\b(0[oO][0-7]+)"},{b:e.CNR}],r:0},{b:"("+e.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[e.CLCM,e.CBCM,e.RM,{b:/</,e:/>\s*[);\]]/,r:0,sL:"xml"}],r:0},{cN:"function",bK:"function",e:/\{/,eE:!0,c:[e.inherit(e.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,c:[e.CLCM,e.CBCM],i:/["'\(]/}],i:/\[|%/},{b:/\$[(.]/},{b:"\\."+e.IR,r:0},{bK:"import",e:"[;$]",k:"import from as",c:[e.ASM,e.QSM]},{cN:"class",bK:"class",e:/[{;=]/,eE:!0,i:/[:"\[\]]/,c:[{bK:"extends"},e.UTM]}]}}),hljs.registerLanguage("nginx",function(e){var t={cN:"variable",v:[{b:/\$\d+/},{b:/\$\{/,e:/}/},{b:"[\\$\\@]"+e.UIR}]},r={eW:!0,l:"[a-z/_]+",k:{built_in:"on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"},r:0,i:"=>",c:[e.HCM,{cN:"string",c:[e.BE,t],v:[{b:/"/,e:/"/},{b:/'/,e:/'/}]},{cN:"url",b:"([a-z]+):/",e:"\\s",eW:!0,eE:!0,c:[t]},{cN:"regexp",c:[e.BE,t],v:[{b:"\\s\\^",e:"\\s|{|;",rE:!0},{b:"~\\*?\\s+",e:"\\s|{|;",rE:!0},{b:"\\*(\\.[a-z\\-]+)+"},{b:"([a-z\\-]+\\.)+\\*"}]},{cN:"number",b:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{cN:"number",b:"\\b\\d+[kKmMgGdshdwy]*\\b",r:0},t]};return{aliases:["nginxconf"],c:[e.HCM,{b:e.UIR+"\\s",e:";|{",rB:!0,c:[{cN:"title",b:e.UIR,starts:r}],r:0}],i:"[^\\s\\}]"}}),hljs.registerLanguage("markdown",function(e){return{aliases:["md","mkdown","mkd"],c:[{cN:"header",v:[{b:"^#{1,6}",e:"$"},{b:"^.+?\\n[=-]{2,}$"}]},{b:"<",e:">",sL:"xml",r:0},{cN:"bullet",b:"^([*+-]|(\\d+\\.))\\s+"},{cN:"strong",b:"[*_]{2}.+?[*_]{2}"},{cN:"emphasis",v:[{b:"\\*.+?\\*"},{b:"_.+?_",r:0}]},{cN:"blockquote",b:"^>\\s+",e:"$"},{cN:"code",v:[{b:"`.+?`"},{b:"^( {4}|	)",e:"$",r:0}]},{cN:"horizontal_rule",b:"^[-\\*]{3,}",e:"$"},{b:"\\[.+?\\][\\(\\[].*?[\\)\\]]",rB:!0,c:[{cN:"link_label",b:"\\[",e:"\\]",eB:!0,rE:!0,r:0},{cN:"link_url",b:"\\]\\(",e:"\\)",eB:!0,eE:!0},{cN:"link_reference",b:"\\]\\[",e:"\\]",eB:!0,eE:!0}],r:10},{b:"^\\[.+\\]:",rB:!0,c:[{cN:"link_reference",b:"\\[",e:"\\]:",eB:!0,eE:!0,starts:{cN:"link_url",e:"$"}}]}]}}),hljs.registerLanguage("json",function(e){var t={literal:"true false null"},r=[e.QSM,e.CNM],n={cN:"value",e:",",eW:!0,eE:!0,c:r,k:t},a={b:"{",e:"}",c:[{cN:"attribute",b:'\\s*"',e:'"\\s*:\\s*',eB:!0,eE:!0,c:[e.BE],i:"\\n",starts:n}],i:"\\S"},s={b:"\\[",e:"\\]",c:[e.inherit(n,{cN:null})],i:"\\S"};return r.splice(r.length,0,a,s),{c:r,k:t,i:"\\S"}}),hljs.registerLanguage("php",function(e){var t={cN:"variable",b:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"},r={cN:"preprocessor",b:/<\?(php)?|\?>/},n={cN:"string",c:[e.BE,r],v:[{b:'b"',e:'"'},{b:"b'",e:"'"},e.inherit(e.ASM,{i:null}),e.inherit(e.QSM,{i:null})]},a={v:[e.BNM,e.CNM]};return{aliases:["php3","php4","php5","php6"],cI:!0,k:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",c:[e.CLCM,e.HCM,e.C("/\\*","\\*/",{c:[{cN:"doctag",b:"@[A-Za-z]+"},r]}),e.C("__halt_compiler.+?;",!1,{eW:!0,k:"__halt_compiler",l:e.UIR}),{cN:"string",b:"<<<['\"]?\\w+['\"]?$",e:"^\\w+;",c:[e.BE]},r,t,{b:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{cN:"function",bK:"function",e:/[;{]/,eE:!0,i:"\\$|\\[|%",c:[e.UTM,{cN:"params",b:"\\(",e:"\\)",c:["self",t,e.CBCM,n,a]}]},{cN:"class",bK:"class interface",e:"{",eE:!0,i:/[:\(\$"]/,c:[{bK:"extends implements"},e.UTM]},{bK:"namespace",e:";",i:/[\.']/,c:[e.UTM]},{bK:"use",e:";",c:[e.UTM]},{b:"=>"},n,a]}}),hljs.registerLanguage("diff",function(e){return{aliases:["patch"],c:[{cN:"chunk",r:10,v:[{b:/^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},{b:/^\*\*\* +\d+,\d+ +\*\*\*\*$/},{b:/^\-\-\- +\d+,\d+ +\-\-\-\-$/}]},{cN:"header",v:[{b:/Index: /,e:/$/},{b:/=====/,e:/=====$/},{b:/^\-\-\-/,e:/$/},{b:/^\*{3} /,e:/$/},{b:/^\+\+\+/,e:/$/},{b:/\*{5}/,e:/\*{5}$/}]},{cN:"addition",b:"^\\+",e:"$"},{cN:"deletion",b:"^\\-",e:"$"},{cN:"change",b:"^\\!",e:"$"}]}}),hljs.registerLanguage("apache",function(e){var t={cN:"number",b:"[\\$%]\\d+"};return{aliases:["apacheconf"],cI:!0,c:[e.HCM,{cN:"tag",b:"</?",e:">"},{cN:"keyword",b:/\w+/,r:0,k:{common:"order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"},starts:{e:/$/,r:0,k:{literal:"on off all"},c:[{cN:"sqbracket",b:"\\s\\[",e:"\\]$"},{cN:"cbracket",b:"[\\$%]\\{",e:"\\}",c:["self",t]},t,e.QSM]}}],i:/\S/}}),hljs.registerLanguage("http",function(e){return{aliases:["https"],i:"\\S",c:[{cN:"status",b:"^HTTP/[0-9\\.]+",e:"$",c:[{cN:"number",b:"\\b\\d{3}\\b"}]},{cN:"request",b:"^[A-Z]+ (.*?) HTTP/[0-9\\.]+$",rB:!0,e:"$",c:[{cN:"string",b:" ",e:" ",eB:!0,eE:!0}]},{cN:"attribute",b:"^\\w",e:": ",eE:!0,i:"\\n|\\s|=",starts:{cN:"string",e:"$"}},{b:"\\n\\n",starts:{sL:"",eW:!0}}]}}),hljs.registerLanguage("css",function(e){var t="[a-zA-Z-][a-zA-Z0-9_-]*",r={cN:"function",b:t+"\\(",rB:!0,eE:!0,e:"\\("},n={cN:"rule",b:/[A-Z\_\.\-]+\s*:/,rB:!0,e:";",eW:!0,c:[{cN:"attribute",b:/\S/,e:":",eE:!0,starts:{cN:"value",eW:!0,eE:!0,c:[r,e.CSSNM,e.QSM,e.ASM,e.CBCM,{cN:"hexcolor",b:"#[0-9A-Fa-f]+"},{cN:"important",b:"!important"}]}}]};return{cI:!0,i:/[=\/|'\$]/,c:[e.CBCM,n,{cN:"id",b:/\#[A-Za-z0-9_-]+/},{cN:"class",b:/\.[A-Za-z0-9_-]+/},{cN:"attr_selector",b:/\[/,e:/\]/,i:"$"},{cN:"pseudo",b:/:(:)?[a-zA-Z0-9\_\-\+\(\)"']+/},{cN:"at_rule",b:"@(font-face|page)",l:"[a-z-]+",k:"font-face page"},{cN:"at_rule",b:"@",e:"[{;]",c:[{cN:"keyword",b:/\S+/},{b:/\s/,eW:!0,eE:!0,r:0,c:[r,e.ASM,e.QSM,e.CSSNM]}]},{cN:"tag",b:t,r:0},{cN:"rules",b:"{",e:"}",i:/\S/,c:[e.CBCM,n]}]}}),hljs.registerLanguage("cs",function(e){var t="abstract as base bool break byte case catch char checked const continue decimal dynamic default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long null when object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this true try typeof uint ulong unchecked unsafe ushort using virtual volatile void while async protected public private internal ascending descending from get group into join let orderby partial select set value var where yield",r=e.IR+"(<"+e.IR+">)?";return{aliases:["csharp"],k:t,i:/::/,c:[e.C("///","$",{rB:!0,c:[{cN:"xmlDocTag",v:[{b:"///",r:0},{b:"<!--|-->"},{b:"</?",e:">"}]}]}),e.CLCM,e.CBCM,{cN:"preprocessor",b:"#",e:"$",k:"if else elif endif define undef warning error line region endregion pragma checksum"},{cN:"string",b:'@"',e:'"',c:[{b:'""'}]},e.ASM,e.QSM,e.CNM,{bK:"class interface",e:/[{;=]/,i:/[^\s:]/,c:[e.TM,e.CLCM,e.CBCM]},{bK:"namespace",e:/[{;=]/,i:/[^\s:]/,c:[{cN:"title",b:"[a-zA-Z](\\.?\\w)*",r:0},e.CLCM,e.CBCM]},{bK:"new return throw await",r:0},{cN:"function",b:"("+r+"\\s+)+"+e.IR+"\\s*\\(",rB:!0,e:/[{;=]/,eE:!0,k:t,c:[{b:e.IR+"\\s*\\(",rB:!0,c:[e.TM],r:0},{cN:"params",b:/\(/,e:/\)/,eB:!0,eE:!0,k:t,r:0,c:[e.ASM,e.QSM,e.CNM,e.CBCM]},e.CLCM,e.CBCM]}]}}),hljs.registerLanguage("xml",function(e){var t="[A-Za-z0-9\\._:-]+",r={b:/<\?(php)?(?!\w)/,e:/\?>/,sL:"php",subLanguageMode:"continuous"},n={eW:!0,i:/</,r:0,c:[r,{cN:"attribute",b:t,r:0},{b:"=",r:0,c:[{cN:"value",c:[r],v:[{b:/"/,e:/"/},{b:/'/,e:/'/},{b:/[^\s\/>]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xsl","plist"],cI:!0,c:[{cN:"doctype",b:"<!DOCTYPE",e:">",r:10,c:[{b:"\\[",e:"\\]"}]},e.C("<!--","-->",{r:10}),{cN:"cdata",b:"<\\!\\[CDATA\\[",e:"\\]\\]>",r:10},{cN:"tag",b:"<style(?=\\s|>|$)",e:">",k:{title:"style"},c:[n],starts:{e:"</style>",rE:!0,sL:"css"}},{cN:"tag",b:"<script(?=\\s|>|$)",e:">",k:{title:"script"},c:[n],starts:{e:"</script>",rE:!0,sL:""}},r,{cN:"pi",b:/<\?\w+/,e:/\?>/,r:10},{cN:"tag",b:"</?",e:"/?>",c:[{cN:"title",b:/[^ \/><\n\t]+/,r:0},n]}]}}),hljs.registerLanguage("makefile",function(e){var t={cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]};return{aliases:["mk","mak"],c:[e.HCM,{b:/^\w+\s*\W*=/,rB:!0,r:0,starts:{cN:"constant",e:/\s*\W*=/,eE:!0,starts:{e:/$/,r:0,c:[t]}}},{cN:"title",b:/^[\w]+:\s*$/},{cN:"phony",b:/^\.PHONY:/,e:/$/,k:".PHONY",l:/[\.\w]+/},{b:/^\t+/,e:/$/,r:0,c:[e.QSM,t]}]}}),hljs.registerLanguage("ini",function(e){return{cI:!0,i:/\S/,c:[e.C(";","$"),{cN:"title",b:"^\\[",e:"\\]"},{cN:"setting",b:"^[a-z0-9\\[\\]_-]+[ \\t]*=[ \\t]*",e:"$",c:[{cN:"value",eW:!0,k:"on off true false yes no",c:[e.QSM,e.NM],r:0}]}]}}),hljs.registerLanguage("bash",function(e){var t={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)}/}]},r={cN:"string",b:/"/,e:/"/,c:[e.BE,t,{
cN:"variable",b:/\$\(/,e:/\)/,c:[e.BE]}]},n={cN:"string",b:/'/,e:/'/};return{aliases:["sh","zsh"],l:/-?[a-z\.]+/,k:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",operator:"-ne -eq -lt -gt -f -d -e -s -l -a"},c:[{cN:"shebang",b:/^#![^\n]+sh\s*$/,r:10},{cN:"function",b:/\w[\w\d_]*\s*\(\s*\)\s*\{/,rB:!0,c:[e.inherit(e.TM,{b:/\w[\w\d_]*/})],r:0},e.HCM,e.NM,r,n,t]}}),hljs.registerLanguage("perl",function(e){var t="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",r={cN:"subst",b:"[$@]\\{",e:"\\}",k:t},n={b:"->{",e:"}"},a={cN:"variable",v:[{b:/\$\d/},{b:/[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},{b:/[\$%@][^\s\w{]/,r:0}]},s=e.C("^(__END__|__DATA__)","\\n$",{r:5}),i=[e.BE,r,a],c=[a,e.HCM,s,e.C("^\\=\\w","\\=cut",{eW:!0}),n,{cN:"string",c:i,v:[{b:"q[qwxr]?\\s*\\(",e:"\\)",r:5},{b:"q[qwxr]?\\s*\\[",e:"\\]",r:5},{b:"q[qwxr]?\\s*\\{",e:"\\}",r:5},{b:"q[qwxr]?\\s*\\|",e:"\\|",r:5},{b:"q[qwxr]?\\s*\\<",e:"\\>",r:5},{b:"qw\\s+q",e:"q",r:5},{b:"'",e:"'",c:[e.BE]},{b:'"',e:'"'},{b:"`",e:"`",c:[e.BE]},{b:"{\\w+}",c:[],r:0},{b:"-?\\w+\\s*\\=\\>",c:[],r:0}]},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\/\\/|"+e.RSR+"|\\b(split|return|print|reverse|grep)\\b)\\s*",k:"split return print reverse grep",r:0,c:[e.HCM,s,{cN:"regexp",b:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",r:10},{cN:"regexp",b:"(m|qr)?/",e:"/[a-z]*",c:[e.BE],r:0}]},{cN:"sub",bK:"sub",e:"(\\s*\\(.*?\\))?[;{]",r:5},{cN:"operator",b:"-\\w\\b",r:0}];return r.c=c,n.c=c,{aliases:["pl"],k:t,c:c}}),Handlebars.registerHelper("typeIcon",function(e){var t="";switch(e){case"blog":t="images/blog-menu-icon-sm.png";break;case"project":t="images/project-menu-icon-sm.png";break;case"design":t="images/design-menu-icon-sm.png";break;case"experiment":t="images/experiment-menu-icon-sm.png"}return'<img src="'+t+'" />'}),Handlebars.registerHelper("getHtmlPath",function(e){return e.substr(0,e.lastIndexOf("."))+".html"}),Handlebars.registerHelper("getImageUrl",function(e){for(var t=0;t<e.length;t++)if("."!==e[t]&&"/"!==e[t])return"http://crayonbytes.us/"+e.substr(t,e.length);return""}),function(e){e(window).load(function(){var t=function(){var t=[],r=0,n=350,a=300,s=20,i=e(".js-home-content"),c=e(".main-content"),o=function(e,r){var o=t[e-1].top+a+20;i.height(o);var l=r*(n+s)===0?350:r*(n+s),u=c.width()-l;if(u>0){var d=u/2;i.css("margin-left",d+"px")}},l=function(e){t=[],r=0===Math.floor(c.width()/(n+s))?1:Math.floor(c.width()/(n+s));for(var i=0;e>i;i++){var l={top:0,left:0};l.top=Math.floor(i/r)*(a+s),l.left=i%r*(n+s),t.push(l)}return o(e,r),t};return{get:l}}(),r=function(){function t(t){e(".main-menu__link").each(function(){e(this).removeClass("active")}),t.addClass("active")}var r=[],a=[],s=function(e){r=e,i()},i=function(){e(".js-blog-link").on("click",function(){return t(e(this)),o("blog"),!1}),e(".js-project-link").on("click",function(){return t(e(this)),o("project"),!1}),e(".js-design-link").on("click",function(){return t(e(this)),o("design"),!1}),e(".js-all-link").on("click",function(){return t(e(this)),c(),!1})},c=function(){e(".update-card").each(function(){e(this).addClass("shown")}),n.adjust()},o=function(t){console.log("filtering..."),a=_.filter(r,function(e){return e.type!=t}),console.log(a.length),e(".update-card").each(function(){e(this).addClass("shown")}),n.adjust();for(var s=a.length-1;s>=0;s--)e(".update-card.shown").eq(_.findIndex(r,a[s])).removeClass("shown");setTimeout(function(){n.adjust()},200)};return{init:s}}(),n=function(){var n=[],a=[],s=e(".js-home-content"),i=function(){e(window).resize(function(){o()})},c=function(){e.getJSON("content/allMd.json",function(e){n=e,n=_.sortBy(n,function(e){var t=moment(e.createDate);return e.prettyDate=t.calendar(),-t.valueOf()}),u(),r.init(n)})},o=function(){a=t.get(n.length),e(".update-card.shown").each(function(t){e(this).css("top",a[t].top+"px"),e(this).css("left",a[t].left+"px")})},l=function(e){s.append(pApp.templates.card(e))},u=function(){console.log("rendering..."),_.forEach(n,function(e,t){l(e)}),o()},d=function(){c(),i()};return{init:d,adjust:o}}(),a=window.location.pathname.split("/"),s=a[a.length-1];s&&"index.html"!==s||n.init()})}(jQuery),this.pApp=this.pApp||{},this.pApp.templates=this.pApp.templates||{},this.pApp.templates.card=Handlebars.template({compiler:[6,">= 2.0.0-beta.1"],main:function(e,t,r,n){var a,s=t.helperMissing,i=this.escapeExpression,c=this.lambda;return'<a href="content/'+i((t.getHtmlPath||e&&e.getHtmlPath||s).call(e,null!=e?e.path:e,{name:"getHtmlPath",hash:{},data:n}))+'" class="update-card shown">\n	<div class="card__header">\n		<div class="card__icon">\n			'+(null!=(a=(t.typeIcon||e&&e.typeIcon||s).call(e,null!=e?e.type:e,{name:"typeIcon",hash:{},data:n}))?a:"")+'\n		</div>\n		<p class="pretty-date">'+i(c(null!=e?e.prettyDate:e,e))+'</p>\n	</div>\n	<div class="card__image-holder">\n		<img src="'+i(c(null!=e?e.img:e,e))+'" />\n	</div>\n	<div class="card__footer">\n		<div class="card__info">\n			<h5>'+i(c(null!=e?e.title:e,e))+"</h5>\n			<p>"+i(c(null!=e?e.description:e,e))+"</p>	\n		</div>\n	</div>\n	\n</a>"},useData:!0});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhpZ2hsaWdodC9qcy9oaWdobGlnaHQucGFjay5qcyIsImhlbHBlcnMuanMiLCJpbmRleC5qcyIsInRlbXBsYXRlcy5qcyJdLCJuYW1lcyI6WyJlIiwiZXhwb3J0cyIsIndpbmRvdyIsImhsanMiLCJkZWZpbmUiLCJhbWQiLCJuIiwicmVwbGFjZSIsInQiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiciIsImV4ZWMiLCJpbmRleCIsImEiLCJ0ZXN0IiwiaSIsImNsYXNzTmFtZSIsInBhcmVudE5vZGUiLCJFIiwic3BsaXQiLCJsZW5ndGgiLCJvIiwidSIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicHVzaCIsImV2ZW50Iiwib2Zmc2V0Iiwibm9kZSIsIm1hdGNoIiwiYyIsInZhbHVlIiwiZiIsIkFycmF5IiwicHJvdG90eXBlIiwibWFwIiwiY2FsbCIsImF0dHJpYnV0ZXMiLCJqb2luIiwicyIsImwiLCJnIiwic3Vic3RyIiwicmV2ZXJzZSIsImZvckVhY2giLCJzcGxpY2UiLCJwb3AiLCJzb3VyY2UiLCJSZWdFeHAiLCJjSSIsImNvbXBpbGVkIiwiayIsImJLIiwiTnVtYmVyIiwiT2JqZWN0Iiwia2V5cyIsImxSIiwiYiIsImJSIiwiZVciLCJlUiIsInRFIiwiaVIiLCJ2Iiwic3RhcnRzIiwiY29uY2F0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImVuZHNQYXJlbnQiLCJwYXJlbnQiLCJOIiwiaGFzT3duUHJvcGVydHkiLCJoIiwidyIsImNsYXNzUHJlZml4IiwicCIsIkwiLCJCIiwibGFzdEluZGV4IiwieSIsImQiLCJzTCIsIngiLCJNIiwic3ViTGFuZ3VhZ2VNb2RlIiwidG9wIiwibGFuZ3VhZ2UiLCJjTiIsInJCIiwiZUIiLCJjcmVhdGUiLCJtIiwickUiLCJlRSIsIkVycm9yIiwiUiIsIkMiLCJqIiwiSSIsIk8iLCJtZXNzYWdlIiwiaW5kZXhPZiIsImxhbmd1YWdlcyIsInNlY29uZF9iZXN0IiwidGFiUmVwbGFjZSIsInVzZUJSIiwidHJpbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJyZXN1bHQiLCJyZSIsImNhbGxlZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhZGRFdmVudExpc3RlbmVyIiwiYWxpYXNlcyIsImhpZ2hsaWdodCIsImhpZ2hsaWdodEF1dG8iLCJmaXhNYXJrdXAiLCJoaWdobGlnaHRCbG9jayIsImNvbmZpZ3VyZSIsImluaXRIaWdobGlnaHRpbmciLCJpbml0SGlnaGxpZ2h0aW5nT25Mb2FkIiwicmVnaXN0ZXJMYW5ndWFnZSIsImxpc3RMYW5ndWFnZXMiLCJnZXRMYW5ndWFnZSIsImluaGVyaXQiLCJJUiIsIlVJUiIsIk5SIiwiQ05SIiwiQk5SIiwiUlNSIiwiQkUiLCJBU00iLCJRU00iLCJQV00iLCJDTENNIiwiQ0JDTSIsIkhDTSIsIk5NIiwiQ05NIiwiQk5NIiwiQ1NTTk0iLCJSTSIsIlRNIiwiVVRNIiwia2V5d29yZCIsImxpdGVyYWwiLCJyZXNlcnZlZCIsImJ1aWx0X2luIiwiY29tbW9uIiwidGl0bGUiLCJvcGVyYXRvciIsIkhhbmRsZWJhcnMiLCJyZWdpc3RlckhlbHBlciIsInR5cGUiLCJpbWdTcmMiLCJyYXdQYXRoIiwibGFzdEluZGV4T2YiLCIkIiwibG9hZCIsImNvb3JkX20iLCJjb29yZGluYXRlcyIsImNhcmRzUGVyUm93IiwiY2FyZFdpZHRoIiwiY2FyZEhlaWdodCIsIm1hcmdpbiIsInVwZGF0ZUFyZWEiLCJ3aW4iLCJhZGp1c3RBcmVhIiwibm9PZkNhcmRzIiwibGFzdFJvd1RvcCIsImhlaWdodCIsImNhcmRzV2lkdGgiLCJleHRyYVNwYWNlIiwid2lkdGgiLCJhcmVhTWFyZ2luIiwiY3NzIiwiaW5pdGlhbGl6ZSIsIk1hdGgiLCJmbG9vciIsImNvb3JkIiwibGVmdCIsImdldCIsImZpbHRlcl9tIiwiZG9tIiwiZWFjaCIsInRoaXMiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiYWxsRGF0YSIsImZpbHRlcmVkIiwiZGF0YSIsImFkZEhhbmRsZXJzIiwib24iLCJzaG93QWxsIiwiY29udGVudF9tIiwiYWRqdXN0IiwiY29uc29sZSIsImxvZyIsIl8iLCJlcSIsImZpbmRJbmRleCIsInNldFRpbWVvdXQiLCJpbml0IiwiY29udGVudEFyZWEiLCJyZXNpemUiLCJhZGp1c3RDb29yZHMiLCJyZWFkIiwiZ2V0SlNPTiIsImZldGNoZWRfZGF0YSIsInNvcnRCeSIsImNkYXRlIiwibW9tZW50IiwiY3JlYXRlRGF0ZSIsInByZXR0eURhdGUiLCJjYWxlbmRhciIsInZhbHVlT2YiLCJyZW5kZXJBbGxDYXJkcyIsInJlbmRlckNhcmQiLCJjRGF0YSIsImFwcGVuZCIsInBBcHAiLCJ0ZW1wbGF0ZXMiLCJjYXJkIiwia2V5IiwibG9jYXRpb24iLCJwYXRobmFtZSIsImZpbGVuYW1lIiwialF1ZXJ5IiwidGVtcGxhdGUiLCJjb21waWxlciIsIm1haW4iLCJkZXB0aDAiLCJoZWxwZXJzIiwicGFydGlhbHMiLCJzdGFjazEiLCJhbGlhczEiLCJoZWxwZXJNaXNzaW5nIiwiYWxpYXMyIiwiZXNjYXBlRXhwcmVzc2lvbiIsImFsaWFzMyIsImxhbWJkYSIsImdldEh0bWxQYXRoIiwicGF0aCIsIm5hbWUiLCJoYXNoIiwidHlwZUljb24iLCJpbWciLCJkZXNjcmlwdGlvbiIsInVzZURhdGEiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEdBQUEsbUJBQUFDLFNBQUFELEVBQUFDLFVBQUFDLE9BQUFDLEtBQUFILE1BQUEsa0JBQUFJLFNBQUFBLE9BQUFDLEtBQUFELE9BQUEsVUFBQSxXQUFBLE1BQUFGLFFBQUFDLFNBQUEsU0FBQUgsR0FBQSxRQUFBTSxHQUFBTixHQUFBLE1BQUFBLEdBQUFPLFFBQUEsTUFBQSxTQUFBQSxRQUFBLE1BQUEsUUFBQUEsUUFBQSxNQUFBLFFBQUEsUUFBQUMsR0FBQVIsR0FBQSxNQUFBQSxHQUFBUyxTQUFBQyxjQUFBLFFBQUFDLEdBQUFYLEVBQUFNLEdBQUEsR0FBQUUsR0FBQVIsR0FBQUEsRUFB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QSxFQUFBbEYsTUFBQWtGLEVBQUFBLElBQ0EsZ0JBQ0FNLEVBQUFFLEVBQUEsTUFBQVIsRUFBQUEsRUFBQWdCLFlBQUFoQixFQUFBQSxJQUNBLHFDQUNBaUIsU0FBQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP2UoZXhwb3J0cyk6KHdpbmRvdy5obGpzPWUoe30pLFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwiaGxqc1wiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5obGpzfSkpfShmdW5jdGlvbihlKXtmdW5jdGlvbiBuKGUpe3JldHVybiBlLnJlcGxhY2UoLyYvZ20sXCImYW1wO1wiKS5yZXBsYWNlKC88L2dtLFwiJmx0O1wiKS5yZXBsYWNlKC8+L2dtLFwiJmd0O1wiKX1mdW5jdGlvbiB0KGUpe3JldHVybiBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gcihlLG4pe3ZhciB0PWUmJmUuZXhlYyhuKTtyZXR1cm4gdCYmMD09dC5pbmRleH1mdW5jdGlvbiBhKGUpe3JldHVybi9uby0/aGlnaGxpZ2h0fHBsYWlufHRleHQvLnRlc3QoZSl9ZnVuY3Rpb24gaShlKXt2YXIgbix0LHIsaT1lLmNsYXNzTmFtZStcIiBcIjtpZihpKz1lLnBhcmVudE5vZGU/ZS5wYXJlbnROb2RlLmNsYXNzTmFtZTpcIlwiLHQ9L1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiLy5leGVjKGkpKXJldHVybiBFKHRbMV0pP3RbMV06XCJuby1oaWdobGlnaHRcIjtmb3IoaT1pLnNwbGl0KC9cXHMrLyksbj0wLHI9aS5sZW5ndGg7cj5uO24rKylpZihFKGlbbl0pfHxhKGlbbl0pKXJldHVybiBpW25dfWZ1bmN0aW9uIG8oZSxuKXt2YXIgdCxyPXt9O2Zvcih0IGluIGUpclt0XT1lW3RdO2lmKG4pZm9yKHQgaW4gbilyW3RdPW5bdF07cmV0dXJuIHJ9ZnVuY3Rpb24gdShlKXt2YXIgbj1bXTtyZXR1cm4gZnVuY3Rpb24gcihlLGEpe2Zvcih2YXIgaT1lLmZpcnN0Q2hpbGQ7aTtpPWkubmV4dFNpYmxpbmcpMz09aS5ub2RlVHlwZT9hKz1pLm5vZGVWYWx1ZS5sZW5ndGg6MT09aS5ub2RlVHlwZSYmKG4ucHVzaCh7ZXZlbnQ6XCJzdGFydFwiLG9mZnNldDphLG5vZGU6aX0pLGE9cihpLGEpLHQoaSkubWF0Y2goL2JyfGhyfGltZ3xpbnB1dC8pfHxuLnB1c2goe2V2ZW50Olwic3RvcFwiLG9mZnNldDphLG5vZGU6aX0pKTtyZXR1cm4gYX0oZSwwKSxufWZ1bmN0aW9uIGMoZSxyLGEpe2Z1bmN0aW9uIGkoKXtyZXR1cm4gZS5sZW5ndGgmJnIubGVuZ3RoP2VbMF0ub2Zmc2V0IT1yWzBdLm9mZnNldD9lWzBdLm9mZnNldDxyWzBdLm9mZnNldD9lOnI6XCJzdGFydFwiPT1yWzBdLmV2ZW50P2U6cjplLmxlbmd0aD9lOnJ9ZnVuY3Rpb24gbyhlKXtmdW5jdGlvbiByKGUpe3JldHVyblwiIFwiK2Uubm9kZU5hbWUrJz1cIicrbihlLnZhbHVlKSsnXCInfWYrPVwiPFwiK3QoZSkrQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGUuYXR0cmlidXRlcyxyKS5qb2luKFwiXCIpK1wiPlwifWZ1bmN0aW9uIHUoZSl7Zis9XCI8L1wiK3QoZSkrXCI+XCJ9ZnVuY3Rpb24gYyhlKXsoXCJzdGFydFwiPT1lLmV2ZW50P286dSkoZS5ub2RlKX1mb3IodmFyIHM9MCxmPVwiXCIsbD1bXTtlLmxlbmd0aHx8ci5sZW5ndGg7KXt2YXIgZz1pKCk7aWYoZis9bihhLnN1YnN0cihzLGdbMF0ub2Zmc2V0LXMpKSxzPWdbMF0ub2Zmc2V0LGc9PWUpe2wucmV2ZXJzZSgpLmZvckVhY2godSk7ZG8gYyhnLnNwbGljZSgwLDEpWzBdKSxnPWkoKTt3aGlsZShnPT1lJiZnLmxlbmd0aCYmZ1swXS5vZmZzZXQ9PXMpO2wucmV2ZXJzZSgpLmZvckVhY2gobyl9ZWxzZVwic3RhcnRcIj09Z1swXS5ldmVudD9sLnB1c2goZ1swXS5ub2RlKTpsLnBvcCgpLGMoZy5zcGxpY2UoMCwxKVswXSl9cmV0dXJuIGYrbihhLnN1YnN0cihzKSl9ZnVuY3Rpb24gcyhlKXtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLnNvdXJjZXx8ZX1mdW5jdGlvbiB0KHQscil7cmV0dXJuIG5ldyBSZWdFeHAobih0KSxcIm1cIisoZS5jST9cImlcIjpcIlwiKSsocj9cImdcIjpcIlwiKSl9ZnVuY3Rpb24gcihhLGkpe2lmKCFhLmNvbXBpbGVkKXtpZihhLmNvbXBpbGVkPSEwLGEuaz1hLmt8fGEuYkssYS5rKXt2YXIgdT17fSxjPWZ1bmN0aW9uKG4sdCl7ZS5jSSYmKHQ9dC50b0xvd2VyQ2FzZSgpKSx0LnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoXCJ8XCIpO3VbdFswXV09W24sdFsxXT9OdW1iZXIodFsxXSk6MV19KX07XCJzdHJpbmdcIj09dHlwZW9mIGEuaz9jKFwia2V5d29yZFwiLGEuayk6T2JqZWN0LmtleXMoYS5rKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2MoZSxhLmtbZV0pfSksYS5rPXV9YS5sUj10KGEubHx8L1xcYlxcdytcXGIvLCEwKSxpJiYoYS5iSyYmKGEuYj1cIlxcXFxiKFwiK2EuYksuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpK1wiKVxcXFxiXCIpLGEuYnx8KGEuYj0vXFxCfFxcYi8pLGEuYlI9dChhLmIpLGEuZXx8YS5lV3x8KGEuZT0vXFxCfFxcYi8pLGEuZSYmKGEuZVI9dChhLmUpKSxhLnRFPW4oYS5lKXx8XCJcIixhLmVXJiZpLnRFJiYoYS50RSs9KGEuZT9cInxcIjpcIlwiKStpLnRFKSksYS5pJiYoYS5pUj10KGEuaSkpLHZvaWQgMD09PWEuciYmKGEucj0xKSxhLmN8fChhLmM9W10pO3ZhciBzPVtdO2EuYy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uudj9lLnYuZm9yRWFjaChmdW5jdGlvbihuKXtzLnB1c2gobyhlLG4pKX0pOnMucHVzaChcInNlbGZcIj09ZT9hOmUpfSksYS5jPXMsYS5jLmZvckVhY2goZnVuY3Rpb24oZSl7cihlLGEpfSksYS5zdGFydHMmJnIoYS5zdGFydHMsaSk7dmFyIGY9YS5jLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5iSz9cIlxcXFwuPyhcIitlLmIrXCIpXFxcXC4/XCI6ZS5ifSkuY29uY2F0KFthLnRFLGEuaV0pLm1hcChuKS5maWx0ZXIoQm9vbGVhbik7YS50PWYubGVuZ3RoP3QoZi5qb2luKFwifFwiKSwhMCk6e2V4ZWM6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH19fX1yKGUpfWZ1bmN0aW9uIGYoZSx0LGEsaSl7ZnVuY3Rpb24gbyhlLG4pe2Zvcih2YXIgdD0wO3Q8bi5jLmxlbmd0aDt0KyspaWYocihuLmNbdF0uYlIsZSkpcmV0dXJuIG4uY1t0XX1mdW5jdGlvbiB1KGUsbil7aWYocihlLmVSLG4pKXtmb3IoO2UuZW5kc1BhcmVudCYmZS5wYXJlbnQ7KWU9ZS5wYXJlbnQ7cmV0dXJuIGV9cmV0dXJuIGUuZVc/dShlLnBhcmVudCxuKTp2b2lkIDB9ZnVuY3Rpb24gYyhlLG4pe3JldHVybiFhJiZyKG4uaVIsZSl9ZnVuY3Rpb24gZyhlLG4pe3ZhciB0PU4uY0k/blswXS50b0xvd2VyQ2FzZSgpOm5bMF07cmV0dXJuIGUuay5oYXNPd25Qcm9wZXJ0eSh0KSYmZS5rW3RdfWZ1bmN0aW9uIGgoZSxuLHQscil7dmFyIGE9cj9cIlwiOncuY2xhc3NQcmVmaXgsaT0nPHNwYW4gY2xhc3M9XCInK2Esbz10P1wiXCI6XCI8L3NwYW4+XCI7cmV0dXJuIGkrPWUrJ1wiPicsaStuK299ZnVuY3Rpb24gcCgpe2lmKCFMLmspcmV0dXJuIG4oQik7dmFyIGU9XCJcIix0PTA7TC5sUi5sYXN0SW5kZXg9MDtmb3IodmFyIHI9TC5sUi5leGVjKEIpO3I7KXtlKz1uKEIuc3Vic3RyKHQsci5pbmRleC10KSk7dmFyIGE9ZyhMLHIpO2E/KHkrPWFbMV0sZSs9aChhWzBdLG4oclswXSkpKTplKz1uKHJbMF0pLHQ9TC5sUi5sYXN0SW5kZXgscj1MLmxSLmV4ZWMoQil9cmV0dXJuIGUrbihCLnN1YnN0cih0KSl9ZnVuY3Rpb24gZCgpe2lmKEwuc0wmJiF4W0wuc0xdKXJldHVybiBuKEIpO3ZhciBlPUwuc0w/ZihMLnNMLEIsITAsTVtMLnNMXSk6bChCKTtyZXR1cm4gTC5yPjAmJih5Kz1lLnIpLFwiY29udGludW91c1wiPT1MLnN1Ykxhbmd1YWdlTW9kZSYmKE1bTC5zTF09ZS50b3ApLGgoZS5sYW5ndWFnZSxlLnZhbHVlLCExLCEwKX1mdW5jdGlvbiBiKCl7cmV0dXJuIHZvaWQgMCE9PUwuc0w/ZCgpOnAoKX1mdW5jdGlvbiB2KGUsdCl7dmFyIHI9ZS5jTj9oKGUuY04sXCJcIiwhMCk6XCJcIjtlLnJCPyhrKz1yLEI9XCJcIik6ZS5lQj8oays9bih0KStyLEI9XCJcIik6KGsrPXIsQj10KSxMPU9iamVjdC5jcmVhdGUoZSx7cGFyZW50Ont2YWx1ZTpMfX0pfWZ1bmN0aW9uIG0oZSx0KXtpZihCKz1lLHZvaWQgMD09PXQpcmV0dXJuIGsrPWIoKSwwO3ZhciByPW8odCxMKTtpZihyKXJldHVybiBrKz1iKCksdihyLHQpLHIuckI/MDp0Lmxlbmd0aDt2YXIgYT11KEwsdCk7aWYoYSl7dmFyIGk9TDtpLnJFfHxpLmVFfHwoQis9dCksays9YigpO2RvIEwuY04mJihrKz1cIjwvc3Bhbj5cIikseSs9TC5yLEw9TC5wYXJlbnQ7d2hpbGUoTCE9YS5wYXJlbnQpO3JldHVybiBpLmVFJiYoays9bih0KSksQj1cIlwiLGEuc3RhcnRzJiZ2KGEuc3RhcnRzLFwiXCIpLGkuckU/MDp0Lmxlbmd0aH1pZihjKHQsTCkpdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGxleGVtZSBcIicrdCsnXCIgZm9yIG1vZGUgXCInKyhMLmNOfHxcIjx1bm5hbWVkPlwiKSsnXCInKTtyZXR1cm4gQis9dCx0Lmxlbmd0aHx8MX12YXIgTj1FKGUpO2lmKCFOKXRocm93IG5ldyBFcnJvcignVW5rbm93biBsYW5ndWFnZTogXCInK2UrJ1wiJyk7cyhOKTt2YXIgUixMPWl8fE4sTT17fSxrPVwiXCI7Zm9yKFI9TDtSIT1OO1I9Ui5wYXJlbnQpUi5jTiYmKGs9aChSLmNOLFwiXCIsITApK2spO3ZhciBCPVwiXCIseT0wO3RyeXtmb3IodmFyIEMsaixJPTA7Oyl7aWYoTC50Lmxhc3RJbmRleD1JLEM9TC50LmV4ZWModCksIUMpYnJlYWs7aj1tKHQuc3Vic3RyKEksQy5pbmRleC1JKSxDWzBdKSxJPUMuaW5kZXgran1mb3IobSh0LnN1YnN0cihJKSksUj1MO1IucGFyZW50O1I9Ui5wYXJlbnQpUi5jTiYmKGsrPVwiPC9zcGFuPlwiKTtyZXR1cm57cjp5LHZhbHVlOmssbGFuZ3VhZ2U6ZSx0b3A6TH19Y2F0Y2goTyl7aWYoLTEhPU8ubWVzc2FnZS5pbmRleE9mKFwiSWxsZWdhbFwiKSlyZXR1cm57cjowLHZhbHVlOm4odCl9O3Rocm93IE99fWZ1bmN0aW9uIGwoZSx0KXt0PXR8fHcubGFuZ3VhZ2VzfHxPYmplY3Qua2V5cyh4KTt2YXIgcj17cjowLHZhbHVlOm4oZSl9LGE9cjtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKEUobikpe3ZhciB0PWYobixlLCExKTt0Lmxhbmd1YWdlPW4sdC5yPmEuciYmKGE9dCksdC5yPnIuciYmKGE9cixyPXQpfX0pLGEubGFuZ3VhZ2UmJihyLnNlY29uZF9iZXN0PWEpLHJ9ZnVuY3Rpb24gZyhlKXtyZXR1cm4gdy50YWJSZXBsYWNlJiYoZT1lLnJlcGxhY2UoL14oKDxbXj5dKz58XFx0KSspL2dtLGZ1bmN0aW9uKGUsbil7cmV0dXJuIG4ucmVwbGFjZSgvXFx0L2csdy50YWJSZXBsYWNlKX0pKSx3LnVzZUJSJiYoZT1lLnJlcGxhY2UoL1xcbi9nLFwiPGJyPlwiKSksZX1mdW5jdGlvbiBoKGUsbix0KXt2YXIgcj1uP1Jbbl06dCxhPVtlLnRyaW0oKV07cmV0dXJuIGUubWF0Y2goL1xcYmhsanNcXGIvKXx8YS5wdXNoKFwiaGxqc1wiKSwtMT09PWUuaW5kZXhPZihyKSYmYS5wdXNoKHIpLGEuam9pbihcIiBcIikudHJpbSgpfWZ1bmN0aW9uIHAoZSl7dmFyIG49aShlKTtpZighYShuKSl7dmFyIHQ7dy51c2VCUj8odD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJkaXZcIiksdC5pbm5lckhUTUw9ZS5pbm5lckhUTUwucmVwbGFjZSgvXFxuL2csXCJcIikucmVwbGFjZSgvPGJyWyBcXC9dKj4vZyxcIlxcblwiKSk6dD1lO3ZhciByPXQudGV4dENvbnRlbnQsbz1uP2YobixyLCEwKTpsKHIpLHM9dSh0KTtpZihzLmxlbmd0aCl7dmFyIHA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiZGl2XCIpO3AuaW5uZXJIVE1MPW8udmFsdWUsby52YWx1ZT1jKHMsdShwKSxyKX1vLnZhbHVlPWcoby52YWx1ZSksZS5pbm5lckhUTUw9by52YWx1ZSxlLmNsYXNzTmFtZT1oKGUuY2xhc3NOYW1lLG4sby5sYW5ndWFnZSksZS5yZXN1bHQ9e2xhbmd1YWdlOm8ubGFuZ3VhZ2UscmU6by5yfSxvLnNlY29uZF9iZXN0JiYoZS5zZWNvbmRfYmVzdD17bGFuZ3VhZ2U6by5zZWNvbmRfYmVzdC5sYW5ndWFnZSxyZTpvLnNlY29uZF9iZXN0LnJ9KX19ZnVuY3Rpb24gZChlKXt3PW8odyxlKX1mdW5jdGlvbiBiKCl7aWYoIWIuY2FsbGVkKXtiLmNhbGxlZD0hMDt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlIGNvZGVcIik7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlLHApfX1mdW5jdGlvbiB2KCl7YWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixiLCExKSxhZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGIsITEpfWZ1bmN0aW9uIG0obix0KXt2YXIgcj14W25dPXQoZSk7ci5hbGlhc2VzJiZyLmFsaWFzZXMuZm9yRWFjaChmdW5jdGlvbihlKXtSW2VdPW59KX1mdW5jdGlvbiBOKCl7cmV0dXJuIE9iamVjdC5rZXlzKHgpfWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHhbZV18fHhbUltlXV19dmFyIHc9e2NsYXNzUHJlZml4OlwiaGxqcy1cIix0YWJSZXBsYWNlOm51bGwsdXNlQlI6ITEsbGFuZ3VhZ2VzOnZvaWQgMH0seD17fSxSPXt9O3JldHVybiBlLmhpZ2hsaWdodD1mLGUuaGlnaGxpZ2h0QXV0bz1sLGUuZml4TWFya3VwPWcsZS5oaWdobGlnaHRCbG9jaz1wLGUuY29uZmlndXJlPWQsZS5pbml0SGlnaGxpZ2h0aW5nPWIsZS5pbml0SGlnaGxpZ2h0aW5nT25Mb2FkPXYsZS5yZWdpc3Rlckxhbmd1YWdlPW0sZS5saXN0TGFuZ3VhZ2VzPU4sZS5nZXRMYW5ndWFnZT1FLGUuaW5oZXJpdD1vLGUuSVI9XCJbYS16QS1aXVxcXFx3KlwiLGUuVUlSPVwiW2EtekEtWl9dXFxcXHcqXCIsZS5OUj1cIlxcXFxiXFxcXGQrKFxcXFwuXFxcXGQrKT9cIixlLkNOUj1cIlxcXFxiKDBbeFhdW2EtZkEtRjAtOV0rfChcXFxcZCsoXFxcXC5cXFxcZCopP3xcXFxcLlxcXFxkKykoW2VFXVstK10/XFxcXGQrKT8pXCIsZS5CTlI9XCJcXFxcYigwYlswMV0rKVwiLGUuUlNSPVwiIXwhPXwhPT18JXwlPXwmfCYmfCY9fFxcXFwqfFxcXFwqPXxcXFxcK3xcXFxcKz18LHwtfC09fC89fC98Onw7fDw8fDw8PXw8PXw8fD09PXw9PXw9fD4+Pj18Pj49fD49fD4+Pnw+Pnw+fFxcXFw/fFxcXFxbfFxcXFx7fFxcXFwofFxcXFxefFxcXFxePXxcXFxcfHxcXFxcfD18XFxcXHxcXFxcfHx+XCIsZS5CRT17YjpcIlxcXFxcXFxcW1xcXFxzXFxcXFNdXCIscjowfSxlLkFTTT17Y046XCJzdHJpbmdcIixiOlwiJ1wiLGU6XCInXCIsaTpcIlxcXFxuXCIsYzpbZS5CRV19LGUuUVNNPXtjTjpcInN0cmluZ1wiLGI6J1wiJyxlOidcIicsaTpcIlxcXFxuXCIsYzpbZS5CRV19LGUuUFdNPXtiOi9cXGIoYXxhbnx0aGV8YXJlfEl8SSdtfGlzbid0fGRvbid0fGRvZXNuJ3R8d29uJ3R8YnV0fGp1c3R8c2hvdWxkfHByZXR0eXxzaW1wbHl8ZW5vdWdofGdvbm5hfGdvaW5nfHd0Znxzb3xzdWNoKVxcYi99LGUuQz1mdW5jdGlvbihuLHQscil7dmFyIGE9ZS5pbmhlcml0KHtjTjpcImNvbW1lbnRcIixiOm4sZTp0LGM6W119LHJ8fHt9KTtyZXR1cm4gYS5jLnB1c2goZS5QV00pLGEuYy5wdXNoKHtjTjpcImRvY3RhZ1wiLGJLOlwiVE9ETyBGSVhNRSBOT1RFIEJVRyBYWFhcIixyOjB9KSxhfSxlLkNMQ009ZS5DKFwiLy9cIixcIiRcIiksZS5DQkNNPWUuQyhcIi9cXFxcKlwiLFwiXFxcXCovXCIpLGUuSENNPWUuQyhcIiNcIixcIiRcIiksZS5OTT17Y046XCJudW1iZXJcIixiOmUuTlIscjowfSxlLkNOTT17Y046XCJudW1iZXJcIixiOmUuQ05SLHI6MH0sZS5CTk09e2NOOlwibnVtYmVyXCIsYjplLkJOUixyOjB9LGUuQ1NTTk09e2NOOlwibnVtYmVyXCIsYjplLk5SK1wiKCV8ZW18ZXh8Y2h8cmVtfHZ3fHZofHZtaW58dm1heHxjbXxtbXxpbnxwdHxwY3xweHxkZWd8Z3JhZHxyYWR8dHVybnxzfG1zfEh6fGtIenxkcGl8ZHBjbXxkcHB4KT9cIixyOjB9LGUuUk09e2NOOlwicmVnZXhwXCIsYjovXFwvLyxlOi9cXC9bZ2ltdXldKi8saTovXFxuLyxjOltlLkJFLHtiOi9cXFsvLGU6L1xcXS8scjowLGM6W2UuQkVdfV19LGUuVE09e2NOOlwidGl0bGVcIixiOmUuSVIscjowfSxlLlVUTT17Y046XCJ0aXRsZVwiLGI6ZS5VSVIscjowfSxlfSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiY29mZmVlc2NyaXB0XCIsZnVuY3Rpb24oZSl7dmFyIGM9e2tleXdvcmQ6XCJpbiBpZiBmb3Igd2hpbGUgZmluYWxseSBuZXcgZG8gcmV0dXJuIGVsc2UgYnJlYWsgY2F0Y2ggaW5zdGFuY2VvZiB0aHJvdyB0cnkgdGhpcyBzd2l0Y2ggY29udGludWUgdHlwZW9mIGRlbGV0ZSBkZWJ1Z2dlciBzdXBlciB0aGVuIHVubGVzcyB1bnRpbCBsb29wIG9mIGJ5IHdoZW4gYW5kIG9yIGlzIGlzbnQgbm90XCIsbGl0ZXJhbDpcInRydWUgZmFsc2UgbnVsbCB1bmRlZmluZWQgeWVzIG5vIG9uIG9mZlwiLHJlc2VydmVkOlwiY2FzZSBkZWZhdWx0IGZ1bmN0aW9uIHZhciB2b2lkIHdpdGggY29uc3QgbGV0IGVudW0gZXhwb3J0IGltcG9ydCBuYXRpdmUgX19oYXNQcm9wIF9fZXh0ZW5kcyBfX3NsaWNlIF9fYmluZCBfX2luZGV4T2ZcIixidWlsdF9pbjpcIm5wbSByZXF1aXJlIGNvbnNvbGUgcHJpbnQgbW9kdWxlIGdsb2JhbCB3aW5kb3cgZG9jdW1lbnRcIn0sbj1cIltBLVphLXokX11bMC05QS1aYS16JF9dKlwiLHQ9e2NOOlwic3Vic3RcIixiOi8jXFx7LyxlOi99LyxrOmN9LHI9W2UuQk5NLGUuaW5oZXJpdChlLkNOTSx7c3RhcnRzOntlOlwiKFxcXFxzKi8pP1wiLHI6MH19KSx7Y046XCJzdHJpbmdcIix2Olt7YjovJycnLyxlOi8nJycvLGM6W2UuQkVdfSx7YjovJy8sZTovJy8sYzpbZS5CRV19LHtiOi9cIlwiXCIvLGU6L1wiXCJcIi8sYzpbZS5CRSx0XX0se2I6L1wiLyxlOi9cIi8sYzpbZS5CRSx0XX1dfSx7Y046XCJyZWdleHBcIix2Olt7YjpcIi8vL1wiLGU6XCIvLy9cIixjOlt0LGUuSENNXX0se2I6XCIvL1tnaW1dKlwiLHI6MH0se2I6L1xcLyg/IVsgKl0pKFxcXFxcXC98LikqP1xcL1tnaW1dKig/PVxcV3wkKS99XX0se2NOOlwicHJvcGVydHlcIixiOlwiQFwiK259LHtiOlwiYFwiLGU6XCJgXCIsZUI6ITAsZUU6ITAsc0w6XCJqYXZhc2NyaXB0XCJ9XTt0LmM9cjt2YXIgaT1lLmluaGVyaXQoZS5UTSx7YjpufSkscz1cIihcXFxcKC4qXFxcXCkpP1xcXFxzKlxcXFxCWy09XT5cIixvPXtjTjpcInBhcmFtc1wiLGI6XCJcXFxcKFteXFxcXChdXCIsckI6ITAsYzpbe2I6L1xcKC8sZTovXFwpLyxrOmMsYzpbXCJzZWxmXCJdLmNvbmNhdChyKX1dfTtyZXR1cm57YWxpYXNlczpbXCJjb2ZmZWVcIixcImNzb25cIixcImljZWRcIl0sazpjLGk6L1xcL1xcKi8sYzpyLmNvbmNhdChbZS5DKFwiIyMjXCIsXCIjIyNcIiksZS5IQ00se2NOOlwiZnVuY3Rpb25cIixiOlwiXlxcXFxzKlwiK24rXCJcXFxccyo9XFxcXHMqXCIrcyxlOlwiWy09XT5cIixyQjohMCxjOltpLG9dfSx7YjovWzpcXCgsPV1cXHMqLyxyOjAsYzpbe2NOOlwiZnVuY3Rpb25cIixiOnMsZTpcIlstPV0+XCIsckI6ITAsYzpbb119XX0se2NOOlwiY2xhc3NcIixiSzpcImNsYXNzXCIsZTpcIiRcIixpOi9bOj1cIlxcW1xcXV0vLGM6W3tiSzpcImV4dGVuZHNcIixlVzohMCxpOi9bOj1cIlxcW1xcXV0vLGM6W2ldfSxpXX0se2NOOlwiYXR0cmlidXRlXCIsYjpuK1wiOlwiLGU6XCI6XCIsckI6ITAsckU6ITAscjowfV0pfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImNwcFwiLGZ1bmN0aW9uKHQpe3ZhciBlPXtjTjpcImtleXdvcmRcIixiOlwiW2EtelxcXFxkX10qX3RcIn0scj17a2V5d29yZDpcImZhbHNlIGludCBmbG9hdCB3aGlsZSBwcml2YXRlIGNoYXIgY2F0Y2ggZXhwb3J0IHZpcnR1YWwgb3BlcmF0b3Igc2l6ZW9mIGR5bmFtaWNfY2FzdHwxMCB0eXBlZGVmIGNvbnN0X2Nhc3R8MTAgY29uc3Qgc3RydWN0IGZvciBzdGF0aWNfY2FzdHwxMCB1bmlvbiBuYW1lc3BhY2UgdW5zaWduZWQgbG9uZyB2b2xhdGlsZSBzdGF0aWMgcHJvdGVjdGVkIGJvb2wgdGVtcGxhdGUgbXV0YWJsZSBpZiBwdWJsaWMgZnJpZW5kIGRvIGdvdG8gYXV0byB2b2lkIGVudW0gZWxzZSBicmVhayBleHRlcm4gdXNpbmcgdHJ1ZSBjbGFzcyBhc20gY2FzZSB0eXBlaWQgc2hvcnQgcmVpbnRlcnByZXRfY2FzdHwxMCBkZWZhdWx0IGRvdWJsZSByZWdpc3RlciBleHBsaWNpdCBzaWduZWQgdHlwZW5hbWUgdHJ5IHRoaXMgc3dpdGNoIGNvbnRpbnVlIGlubGluZSBkZWxldGUgYWxpZ25vZiBjb25zdGV4cHIgZGVjbHR5cGUgbm9leGNlcHQgbnVsbHB0ciBzdGF0aWNfYXNzZXJ0IHRocmVhZF9sb2NhbCByZXN0cmljdCBfQm9vbCBjb21wbGV4IF9Db21wbGV4IF9JbWFnaW5hcnkgYXRvbWljX2Jvb2wgYXRvbWljX2NoYXIgYXRvbWljX3NjaGFyIGF0b21pY191Y2hhciBhdG9taWNfc2hvcnQgYXRvbWljX3VzaG9ydCBhdG9taWNfaW50IGF0b21pY191aW50IGF0b21pY19sb25nIGF0b21pY191bG9uZyBhdG9taWNfbGxvbmcgYXRvbWljX3VsbG9uZ1wiLGJ1aWx0X2luOlwic3RkIHN0cmluZyBjaW4gY291dCBjZXJyIGNsb2cgc3RyaW5nc3RyZWFtIGlzdHJpbmdzdHJlYW0gb3N0cmluZ3N0cmVhbSBhdXRvX3B0ciBkZXF1ZSBsaXN0IHF1ZXVlIHN0YWNrIHZlY3RvciBtYXAgc2V0IGJpdHNldCBtdWx0aXNldCBtdWx0aW1hcCB1bm9yZGVyZWRfc2V0IHVub3JkZXJlZF9tYXAgdW5vcmRlcmVkX211bHRpc2V0IHVub3JkZXJlZF9tdWx0aW1hcCBhcnJheSBzaGFyZWRfcHRyIGFib3J0IGFicyBhY29zIGFzaW4gYXRhbjIgYXRhbiBjYWxsb2MgY2VpbCBjb3NoIGNvcyBleGl0IGV4cCBmYWJzIGZsb29yIGZtb2QgZnByaW50ZiBmcHV0cyBmcmVlIGZyZXhwIGZzY2FuZiBpc2FsbnVtIGlzYWxwaGEgaXNjbnRybCBpc2RpZ2l0IGlzZ3JhcGggaXNsb3dlciBpc3ByaW50IGlzcHVuY3QgaXNzcGFjZSBpc3VwcGVyIGlzeGRpZ2l0IHRvbG93ZXIgdG91cHBlciBsYWJzIGxkZXhwIGxvZzEwIGxvZyBtYWxsb2MgbWVtY2hyIG1lbWNtcCBtZW1jcHkgbWVtc2V0IG1vZGYgcG93IHByaW50ZiBwdXRjaGFyIHB1dHMgc2NhbmYgc2luaCBzaW4gc25wcmludGYgc3ByaW50ZiBzcXJ0IHNzY2FuZiBzdHJjYXQgc3RyY2hyIHN0cmNtcCBzdHJjcHkgc3RyY3NwbiBzdHJsZW4gc3RybmNhdCBzdHJuY21wIHN0cm5jcHkgc3RycGJyayBzdHJyY2hyIHN0cnNwbiBzdHJzdHIgdGFuaCB0YW4gdmZwcmludGYgdnByaW50ZiB2c3ByaW50ZlwifTtyZXR1cm57YWxpYXNlczpbXCJjXCIsXCJjY1wiLFwiaFwiLFwiYysrXCIsXCJoKytcIixcImhwcFwiXSxrOnIsaTpcIjwvXCIsYzpbZSx0LkNMQ00sdC5DQkNNLHtjTjpcInN0cmluZ1wiLHY6W3QuaW5oZXJpdCh0LlFTTSx7YjonKCh1OD98VSl8TCk/XCInfSkse2I6Jyh1OD98VSk/UlwiJyxlOidcIicsYzpbdC5CRV19LHtiOlwiJ1xcXFxcXFxcPy5cIixlOlwiJ1wiLGk6XCIuXCJ9XX0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFxiKFxcXFxkKyhcXFxcLlxcXFxkKik/fFxcXFwuXFxcXGQrKSh1fFV8bHxMfHVsfFVMfGZ8RilcIn0sdC5DTk0se2NOOlwicHJlcHJvY2Vzc29yXCIsYjpcIiNcIixlOlwiJFwiLGs6XCJpZiBlbHNlIGVsaWYgZW5kaWYgZGVmaW5lIHVuZGVmIHdhcm5pbmcgZXJyb3IgbGluZSBwcmFnbWFcIixjOlt7YjovXFxcXFxcbi8scjowfSx7YjonaW5jbHVkZVxcXFxzKls8XCJdJyxlOidbPlwiXScsazpcImluY2x1ZGVcIixpOlwiXFxcXG5cIn0sdC5DTENNXX0se2I6XCJcXFxcYihkZXF1ZXxsaXN0fHF1ZXVlfHN0YWNrfHZlY3RvcnxtYXB8c2V0fGJpdHNldHxtdWx0aXNldHxtdWx0aW1hcHx1bm9yZGVyZWRfbWFwfHVub3JkZXJlZF9zZXR8dW5vcmRlcmVkX211bHRpc2V0fHVub3JkZXJlZF9tdWx0aW1hcHxhcnJheSlcXFxccyo8XCIsZTpcIj5cIixrOnIsYzpbXCJzZWxmXCIsZV19LHtiOnQuSVIrXCI6OlwiLGs6cn0se2JLOlwibmV3IHRocm93IHJldHVybiBlbHNlXCIscjowfSx7Y046XCJmdW5jdGlvblwiLGI6XCIoXCIrdC5JUitcIlxcXFxzKykrXCIrdC5JUitcIlxcXFxzKlxcXFwoXCIsckI6ITAsZTovW3s7PV0vLGVFOiEwLGs6cixjOlt7Yjp0LklSK1wiXFxcXHMqXFxcXChcIixyQjohMCxjOlt0LlRNXSxyOjB9LHtjTjpcInBhcmFtc1wiLGI6L1xcKC8sZTovXFwpLyxrOnIscjowLGM6W3QuQ0JDTV19LHQuQ0xDTSx0LkNCQ01dfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwicHl0aG9uXCIsZnVuY3Rpb24oZSl7dmFyIHI9e2NOOlwicHJvbXB0XCIsYjovXig+Pj58XFwuXFwuXFwuKSAvfSxiPXtjTjpcInN0cmluZ1wiLGM6W2UuQkVdLHY6W3tiOi8odXxiKT9yPycnJy8sZTovJycnLyxjOltyXSxyOjEwfSx7YjovKHV8Yik/cj9cIlwiXCIvLGU6L1wiXCJcIi8sYzpbcl0scjoxMH0se2I6Lyh1fHJ8dXIpJy8sZTovJy8scjoxMH0se2I6Lyh1fHJ8dXIpXCIvLGU6L1wiLyxyOjEwfSx7YjovKGJ8YnIpJy8sZTovJy99LHtiOi8oYnxicilcIi8sZTovXCIvfSxlLkFTTSxlLlFTTV19LGw9e2NOOlwibnVtYmVyXCIscjowLHY6W3tiOmUuQk5SK1wiW2xMakpdP1wifSx7YjpcIlxcXFxiKDBvWzAtN10rKVtsTGpKXT9cIn0se2I6ZS5DTlIrXCJbbExqSl0/XCJ9XX0sYz17Y046XCJwYXJhbXNcIixiOi9cXCgvLGU6L1xcKS8sYzpbXCJzZWxmXCIscixsLGJdfTtyZXR1cm57YWxpYXNlczpbXCJweVwiLFwiZ3lwXCJdLGs6e2tleXdvcmQ6XCJhbmQgZWxpZiBpcyBnbG9iYWwgYXMgaW4gaWYgZnJvbSByYWlzZSBmb3IgZXhjZXB0IGZpbmFsbHkgcHJpbnQgaW1wb3J0IHBhc3MgcmV0dXJuIGV4ZWMgZWxzZSBicmVhayBub3Qgd2l0aCBjbGFzcyBhc3NlcnQgeWllbGQgdHJ5IHdoaWxlIGNvbnRpbnVlIGRlbCBvciBkZWYgbGFtYmRhIG5vbmxvY2FsfDEwIE5vbmUgVHJ1ZSBGYWxzZVwiLGJ1aWx0X2luOlwiRWxsaXBzaXMgTm90SW1wbGVtZW50ZWRcIn0saTovKDxcXC98LT58XFw/KS8sYzpbcixsLGIsZS5IQ00se3Y6W3tjTjpcImZ1bmN0aW9uXCIsYks6XCJkZWZcIixyOjEwfSx7Y046XCJjbGFzc1wiLGJLOlwiY2xhc3NcIn1dLGU6LzovLGk6L1skez07XFxuLF0vLGM6W2UuVVRNLGNdfSx7Y046XCJkZWNvcmF0b3JcIixiOi9ALyxlOi8kL30se2I6L1xcYihwcmludHxleGVjKVxcKC99XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJzcWxcIixmdW5jdGlvbihlKXt2YXIgdD1lLkMoXCItLVwiLFwiJFwiKTtyZXR1cm57Y0k6ITAsaTovWzw+XS8sYzpbe2NOOlwib3BlcmF0b3JcIixiSzpcImJlZ2luIGVuZCBzdGFydCBjb21taXQgcm9sbGJhY2sgc2F2ZXBvaW50IGxvY2sgYWx0ZXIgY3JlYXRlIGRyb3AgcmVuYW1lIGNhbGwgZGVsZXRlIGRvIGhhbmRsZXIgaW5zZXJ0IGxvYWQgcmVwbGFjZSBzZWxlY3QgdHJ1bmNhdGUgdXBkYXRlIHNldCBzaG93IHByYWdtYSBncmFudCBtZXJnZSBkZXNjcmliZSB1c2UgZXhwbGFpbiBoZWxwIGRlY2xhcmUgcHJlcGFyZSBleGVjdXRlIGRlYWxsb2NhdGUgc2F2ZXBvaW50IHJlbGVhc2UgdW5sb2NrIHB1cmdlIHJlc2V0IGNoYW5nZSBzdG9wIGFuYWx5emUgY2FjaGUgZmx1c2ggb3B0aW1pemUgcmVwYWlyIGtpbGwgaW5zdGFsbCB1bmluc3RhbGwgY2hlY2tzdW0gcmVzdG9yZSBjaGVjayBiYWNrdXAgcmV2b2tlXCIsZTovOy8sZVc6ITAsazp7a2V5d29yZDpcImFicyBhYnNvbHV0ZSBhY29zIGFjdGlvbiBhZGQgYWRkZGF0ZSBhZGR0aW1lIGFlc19kZWNyeXB0IGFlc19lbmNyeXB0IGFmdGVyIGFnZ3JlZ2F0ZSBhbGwgYWxsb2NhdGUgYWx0ZXIgYW5hbHl6ZSBhbmQgYW55IGFyZSBhcyBhc2MgYXNjaWkgYXNpbiBhc3NlcnRpb24gYXQgYXRhbiBhdGFuMiBhdG4yIGF1dGhvcml6YXRpb24gYXV0aG9ycyBhdmcgYmFja3VwIGJlZm9yZSBiZWdpbiBiZW5jaG1hcmsgYmV0d2VlbiBiaW4gYmlubG9nIGJpdF9hbmQgYml0X2NvdW50IGJpdF9sZW5ndGggYml0X29yIGJpdF94b3IgYm90aCBieSBjYWNoZSBjYWxsIGNhc2NhZGUgY2FzY2FkZWQgY2FzZSBjYXN0IGNhdGFsb2cgY2VpbCBjZWlsaW5nIGNoYWluIGNoYW5nZSBjaGFuZ2VkIGNoYXJfbGVuZ3RoIGNoYXJhY3Rlcl9sZW5ndGggY2hhcmluZGV4IGNoYXJzZXQgY2hlY2sgY2hlY2tzdW0gY2hlY2tzdW1fYWdnIGNob29zZSBjbG9zZSBjb2FsZXNjZSBjb2VyY2liaWxpdHkgY29sbGF0ZSBjb2xsYXRpb24gY29sbGF0aW9ucHJvcGVydHkgY29sdW1uIGNvbHVtbnMgY29sdW1uc191cGRhdGVkIGNvbW1pdCBjb21wcmVzcyBjb25jYXQgY29uY2F0X3dzIGNvbmN1cnJlbnQgY29ubmVjdCBjb25uZWN0aW9uIGNvbm5lY3Rpb25faWQgY29uc2lzdGVudCBjb25zdHJhaW50IGNvbnN0cmFpbnRzIGNvbnRpbnVlIGNvbnRyaWJ1dG9ycyBjb252IGNvbnZlcnQgY29udmVydF90eiBjb3JyZXNwb25kaW5nIGNvcyBjb3QgY291bnQgY291bnRfYmlnIGNyYzMyIGNyZWF0ZSBjcm9zcyBjdW1lX2Rpc3QgY3VyZGF0ZSBjdXJyZW50IGN1cnJlbnRfZGF0ZSBjdXJyZW50X3RpbWUgY3VycmVudF90aW1lc3RhbXAgY3VycmVudF91c2VyIGN1cnNvciBjdXJ0aW1lIGRhdGEgZGF0YWJhc2UgZGF0YWJhc2VzIGRhdGFsZW5ndGggZGF0ZV9hZGQgZGF0ZV9mb3JtYXQgZGF0ZV9zdWIgZGF0ZWFkZCBkYXRlZGlmZiBkYXRlZnJvbXBhcnRzIGRhdGVuYW1lIGRhdGVwYXJ0IGRhdGV0aW1lMmZyb21wYXJ0cyBkYXRldGltZW9mZnNldGZyb21wYXJ0cyBkYXkgZGF5bmFtZSBkYXlvZm1vbnRoIGRheW9md2VlayBkYXlvZnllYXIgZGVhbGxvY2F0ZSBkZWNsYXJlIGRlY29kZSBkZWZhdWx0IGRlZmVycmFibGUgZGVmZXJyZWQgZGVncmVlcyBkZWxheWVkIGRlbGV0ZSBkZXNfZGVjcnlwdCBkZXNfZW5jcnlwdCBkZXNfa2V5X2ZpbGUgZGVzYyBkZXNjcmliZSBkZXNjcmlwdG9yIGRpYWdub3N0aWNzIGRpZmZlcmVuY2UgZGlzY29ubmVjdCBkaXN0aW5jdCBkaXN0aW5jdHJvdyBkaXYgZG8gZG9tYWluIGRvdWJsZSBkcm9wIGR1bXBmaWxlIGVhY2ggZWxzZSBlbHQgZW5jbG9zZWQgZW5jb2RlIGVuY3J5cHQgZW5kIGVuZC1leGVjIGVuZ2luZSBlbmdpbmVzIGVvbW9udGggZXJyb3JzIGVzY2FwZSBlc2NhcGVkIGV2ZW50IGV2ZW50ZGF0YSBldmVudHMgZXhjZXB0IGV4Y2VwdGlvbiBleGVjIGV4ZWN1dGUgZXhpc3RzIGV4cCBleHBsYWluIGV4cG9ydF9zZXQgZXh0ZW5kZWQgZXh0ZXJuYWwgZXh0cmFjdCBmYXN0IGZldGNoIGZpZWxkIGZpZWxkcyBmaW5kX2luX3NldCBmaXJzdCBmaXJzdF92YWx1ZSBmbG9vciBmbHVzaCBmb3IgZm9yY2UgZm9yZWlnbiBmb3JtYXQgZm91bmQgZm91bmRfcm93cyBmcm9tIGZyb21fYmFzZTY0IGZyb21fZGF5cyBmcm9tX3VuaXh0aW1lIGZ1bGwgZnVuY3Rpb24gZ2V0IGdldF9mb3JtYXQgZ2V0X2xvY2sgZ2V0ZGF0ZSBnZXR1dGNkYXRlIGdsb2JhbCBnbyBnb3RvIGdyYW50IGdyYW50cyBncmVhdGVzdCBncm91cCBncm91cF9jb25jYXQgZ3JvdXBpbmcgZ3JvdXBpbmdfaWQgZ3RpZF9zdWJzZXQgZ3RpZF9zdWJ0cmFjdCBoYW5kbGVyIGhhdmluZyBoZWxwIGhleCBoaWdoX3ByaW9yaXR5IGhvc3RzIGhvdXIgaWRlbnRfY3VycmVudCBpZGVudF9pbmNyIGlkZW50X3NlZWQgaWRlbnRpZmllZCBpZGVudGl0eSBpZiBpZm51bGwgaWdub3JlIGlpZiBpbGlrZSBpbW1lZGlhdGUgaW4gaW5kZXggaW5kaWNhdG9yIGluZXQ2X2F0b24gaW5ldDZfbnRvYSBpbmV0X2F0b24gaW5ldF9udG9hIGluZmlsZSBpbml0aWFsbHkgaW5uZXIgaW5ub2RiIGlucHV0IGluc2VydCBpbnN0YWxsIGluc3RyIGludGVyc2VjdCBpbnRvIGlzIGlzX2ZyZWVfbG9jayBpc19pcHY0IGlzX2lwdjRfY29tcGF0IGlzX2lwdjRfbWFwcGVkIGlzX25vdCBpc19ub3RfbnVsbCBpc191c2VkX2xvY2sgaXNkYXRlIGlzbnVsbCBpc29sYXRpb24gam9pbiBrZXkga2lsbCBsYW5ndWFnZSBsYXN0IGxhc3RfZGF5IGxhc3RfaW5zZXJ0X2lkIGxhc3RfdmFsdWUgbGNhc2UgbGVhZCBsZWFkaW5nIGxlYXN0IGxlYXZlcyBsZWZ0IGxlbiBsZW5naHQgbGV2ZWwgbGlrZSBsaW1pdCBsaW5lcyBsbiBsb2FkIGxvYWRfZmlsZSBsb2NhbCBsb2NhbHRpbWUgbG9jYWx0aW1lc3RhbXAgbG9jYXRlIGxvY2sgbG9nIGxvZzEwIGxvZzIgbG9nZmlsZSBsb2dzIGxvd19wcmlvcml0eSBsb3dlciBscGFkIGx0cmltIG1ha2Vfc2V0IG1ha2VkYXRlIG1ha2V0aW1lIG1hc3RlciBtYXN0ZXJfcG9zX3dhaXQgbWF0Y2ggbWF0Y2hlZCBtYXggbWQ1IG1lZGl1bSBtZXJnZSBtaWNyb3NlY29uZCBtaWQgbWluIG1pbnV0ZSBtb2QgbW9kZSBtb2R1bGUgbW9udGggbW9udGhuYW1lIG11dGV4IG5hbWVfY29uc3QgbmFtZXMgbmF0aW9uYWwgbmF0dXJhbCBuY2hhciBuZXh0IG5vIG5vX3dyaXRlX3RvX2JpbmxvZyBub3Qgbm93IG51bGxpZiBudmFyY2hhciBvY3Qgb2N0ZXRfbGVuZ3RoIG9mIG9sZF9wYXNzd29yZCBvbiBvbmx5IG9wZW4gb3B0aW1pemUgb3B0aW9uIG9wdGlvbmFsbHkgb3Igb3JkIG9yZGVyIG91dGVyIG91dGZpbGUgb3V0cHV0IHBhZCBwYXJzZSBwYXJ0aWFsIHBhcnRpdGlvbiBwYXNzd29yZCBwYXRpbmRleCBwZXJjZW50X3JhbmsgcGVyY2VudGlsZV9jb250IHBlcmNlbnRpbGVfZGlzYyBwZXJpb2RfYWRkIHBlcmlvZF9kaWZmIHBpIHBsdWdpbiBwb3NpdGlvbiBwb3cgcG93ZXIgcHJhZ21hIHByZWNpc2lvbiBwcmVwYXJlIHByZXNlcnZlIHByaW1hcnkgcHJpb3IgcHJpdmlsZWdlcyBwcm9jZWR1cmUgcHJvY2VkdXJlX2FuYWx5emUgcHJvY2Vzc2xpc3QgcHJvZmlsZSBwcm9maWxlcyBwdWJsaWMgcHVibGlzaGluZ3NlcnZlcm5hbWUgcHVyZ2UgcXVhcnRlciBxdWVyeSBxdWljayBxdW90ZSBxdW90ZW5hbWUgcmFkaWFucyByYW5kIHJlYWQgcmVmZXJlbmNlcyByZWdleHAgcmVsYXRpdmUgcmVsYXlsb2cgcmVsZWFzZSByZWxlYXNlX2xvY2sgcmVuYW1lIHJlcGFpciByZXBlYXQgcmVwbGFjZSByZXBsaWNhdGUgcmVzZXQgcmVzdG9yZSByZXN0cmljdCByZXR1cm4gcmV0dXJucyByZXZlcnNlIHJldm9rZSByaWdodCBybGlrZSByb2xsYmFjayByb2xsdXAgcm91bmQgcm93IHJvd19jb3VudCByb3dzIHJwYWQgcnRyaW0gc2F2ZXBvaW50IHNjaGVtYSBzY3JvbGwgc2VjX3RvX3RpbWUgc2Vjb25kIHNlY3Rpb24gc2VsZWN0IHNlcmlhbGl6YWJsZSBzZXJ2ZXIgc2Vzc2lvbiBzZXNzaW9uX3VzZXIgc2V0IHNoYSBzaGExIHNoYTIgc2hhcmUgc2hvdyBzaWduIHNpbiBzaXplIHNsYXZlIHNsZWVwIHNtYWxsZGF0ZXRpbWVmcm9tcGFydHMgc25hcHNob3Qgc29tZSBzb25hbWUgc291bmRleCBzb3VuZHNfbGlrZSBzcGFjZSBzcWwgc3FsX2JpZ19yZXN1bHQgc3FsX2J1ZmZlcl9yZXN1bHQgc3FsX2NhY2hlIHNxbF9jYWxjX2ZvdW5kX3Jvd3Mgc3FsX25vX2NhY2hlIHNxbF9zbWFsbF9yZXN1bHQgc3FsX3ZhcmlhbnRfcHJvcGVydHkgc3Fsc3RhdGUgc3FydCBzcXVhcmUgc3RhcnQgc3RhcnRpbmcgc3RhdHVzIHN0ZCBzdGRkZXYgc3RkZGV2X3BvcCBzdGRkZXZfc2FtcCBzdGRldiBzdGRldnAgc3RvcCBzdHIgc3RyX3RvX2RhdGUgc3RyYWlnaHRfam9pbiBzdHJjbXAgc3RyaW5nIHN0dWZmIHN1YmRhdGUgc3Vic3RyIHN1YnN0cmluZyBzdWJ0aW1lIHN1YnRyaW5nX2luZGV4IHN1bSBzd2l0Y2hvZmZzZXQgc3lzZGF0ZSBzeXNkYXRldGltZSBzeXNkYXRldGltZW9mZnNldCBzeXN0ZW1fdXNlciBzeXN1dGNkYXRldGltZSB0YWJsZSB0YWJsZXMgdGFibGVzcGFjZSB0YW4gdGVtcG9yYXJ5IHRlcm1pbmF0ZWQgdGVydGlhcnlfd2VpZ2h0cyB0aGVuIHRpbWUgdGltZV9mb3JtYXQgdGltZV90b19zZWMgdGltZWRpZmYgdGltZWZyb21wYXJ0cyB0aW1lc3RhbXAgdGltZXN0YW1wYWRkIHRpbWVzdGFtcGRpZmYgdGltZXpvbmVfaG91ciB0aW1lem9uZV9taW51dGUgdG8gdG9fYmFzZTY0IHRvX2RheXMgdG9fc2Vjb25kcyB0b2RhdGV0aW1lb2Zmc2V0IHRyYWlsaW5nIHRyYW5zYWN0aW9uIHRyYW5zbGF0aW9uIHRyaWdnZXIgdHJpZ2dlcl9uZXN0bGV2ZWwgdHJpZ2dlcnMgdHJpbSB0cnVuY2F0ZSB0cnlfY2FzdCB0cnlfY29udmVydCB0cnlfcGFyc2UgdWNhc2UgdW5jb21wcmVzcyB1bmNvbXByZXNzZWRfbGVuZ3RoIHVuaGV4IHVuaWNvZGUgdW5pbnN0YWxsIHVuaW9uIHVuaXF1ZSB1bml4X3RpbWVzdGFtcCB1bmtub3duIHVubG9jayB1cGRhdGUgdXBncmFkZSB1cHBlZCB1cHBlciB1c2FnZSB1c2UgdXNlciB1c2VyX3Jlc291cmNlcyB1c2luZyB1dGNfZGF0ZSB1dGNfdGltZSB1dGNfdGltZXN0YW1wIHV1aWQgdXVpZF9zaG9ydCB2YWxpZGF0ZV9wYXNzd29yZF9zdHJlbmd0aCB2YWx1ZSB2YWx1ZXMgdmFyIHZhcl9wb3AgdmFyX3NhbXAgdmFyaWFibGVzIHZhcmlhbmNlIHZhcnAgdmVyc2lvbiB2aWV3IHdhcm5pbmdzIHdlZWsgd2Vla2RheSB3ZWVrb2Z5ZWFyIHdlaWdodF9zdHJpbmcgd2hlbiB3aGVuZXZlciB3aGVyZSB3aXRoIHdvcmsgd3JpdGUgeG1sIHhvciB5ZWFyIHllYXJ3ZWVrIHpvblwiLGxpdGVyYWw6XCJ0cnVlIGZhbHNlIG51bGxcIixidWlsdF9pbjpcImFycmF5IGJpZ2ludCBiaW5hcnkgYml0IGJsb2IgYm9vbGVhbiBjaGFyIGNoYXJhY3RlciBkYXRlIGRlYyBkZWNpbWFsIGZsb2F0IGludCBpbnRlZ2VyIGludGVydmFsIG51bWJlciBudW1lcmljIHJlYWwgc2VyaWFsIHNtYWxsaW50IHZhcmNoYXIgdmFyeWluZyBpbnQ4IHNlcmlhbDggdGV4dFwifSxjOlt7Y046XCJzdHJpbmdcIixiOlwiJ1wiLGU6XCInXCIsYzpbZS5CRSx7YjpcIicnXCJ9XX0se2NOOlwic3RyaW5nXCIsYjonXCInLGU6J1wiJyxjOltlLkJFLHtiOidcIlwiJ31dfSx7Y046XCJzdHJpbmdcIixiOlwiYFwiLGU6XCJgXCIsYzpbZS5CRV19LGUuQ05NLGUuQ0JDTSx0XX0sZS5DQkNNLHRdfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImphdmFcIixmdW5jdGlvbihlKXt2YXIgYT1lLlVJUitcIig8XCIrZS5VSVIrXCI+KT9cIix0PVwiZmFsc2Ugc3luY2hyb25pemVkIGludCBhYnN0cmFjdCBmbG9hdCBwcml2YXRlIGNoYXIgYm9vbGVhbiBzdGF0aWMgbnVsbCBpZiBjb25zdCBmb3IgdHJ1ZSB3aGlsZSBsb25nIHN0cmljdGZwIGZpbmFsbHkgcHJvdGVjdGVkIGltcG9ydCBuYXRpdmUgZmluYWwgdm9pZCBlbnVtIGVsc2UgYnJlYWsgdHJhbnNpZW50IGNhdGNoIGluc3RhbmNlb2YgYnl0ZSBzdXBlciB2b2xhdGlsZSBjYXNlIGFzc2VydCBzaG9ydCBwYWNrYWdlIGRlZmF1bHQgZG91YmxlIHB1YmxpYyB0cnkgdGhpcyBzd2l0Y2ggY29udGludWUgdGhyb3dzIHByb3RlY3RlZCBwdWJsaWMgcHJpdmF0ZVwiLGM9XCJcXFxcYigwW2JCXShbMDFdK1swMV9dK1swMV0rfFswMV0rKXwwW3hYXShbYS1mQS1GMC05XStbYS1mQS1GMC05X10rW2EtZkEtRjAtOV0rfFthLWZBLUYwLTldKyl8KChbXFxcXGRdK1tcXFxcZF9dK1tcXFxcZF0rfFtcXFxcZF0rKShcXFxcLihbXFxcXGRdK1tcXFxcZF9dK1tcXFxcZF0rfFtcXFxcZF0rKSk/fFxcXFwuKFtcXFxcZF0rW1xcXFxkX10rW1xcXFxkXSt8W1xcXFxkXSspKShbZUVdWy0rXT9cXFxcZCspPylbbExmRl0/XCIscj17Y046XCJudW1iZXJcIixiOmMscjowfTtyZXR1cm57YWxpYXNlczpbXCJqc3BcIl0sazp0LGk6LzxcXC8vLGM6W2UuQyhcIi9cXFxcKlxcXFwqXCIsXCJcXFxcKi9cIix7cjowLGM6W3tjTjpcImRvY3RhZ1wiLGI6XCJAW0EtWmEtel0rXCJ9XX0pLGUuQ0xDTSxlLkNCQ00sZS5BU00sZS5RU00se2NOOlwiY2xhc3NcIixiSzpcImNsYXNzIGludGVyZmFjZVwiLGU6L1t7Oz1dLyxlRTohMCxrOlwiY2xhc3MgaW50ZXJmYWNlXCIsaTovWzpcIlxcW1xcXV0vLGM6W3tiSzpcImV4dGVuZHMgaW1wbGVtZW50c1wifSxlLlVUTV19LHtiSzpcIm5ldyB0aHJvdyByZXR1cm4gZWxzZVwiLHI6MH0se2NOOlwiZnVuY3Rpb25cIixiOlwiKFwiK2ErXCJcXFxccyspK1wiK2UuVUlSK1wiXFxcXHMqXFxcXChcIixyQjohMCxlOi9bezs9XS8sZUU6ITAsazp0LGM6W3tiOmUuVUlSK1wiXFxcXHMqXFxcXChcIixyQjohMCxyOjAsYzpbZS5VVE1dfSx7Y046XCJwYXJhbXNcIixiOi9cXCgvLGU6L1xcKS8sazp0LHI6MCxjOltlLkFTTSxlLlFTTSxlLkNOTSxlLkNCQ01dfSxlLkNMQ00sZS5DQkNNXX0scix7Y046XCJhbm5vdGF0aW9uXCIsYjpcIkBbQS1aYS16XStcIn1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInJ1YnlcIixmdW5jdGlvbihlKXt2YXIgYz1cIlthLXpBLVpfXVxcXFx3KlshPz1dP3xbLSt+XVxcXFxAfDw8fD4+fD1+fD09PT98PD0+fFs8Pl09P3xcXFxcKlxcXFwqfFstLyslXiYqfmB8XXxcXFxcW1xcXFxdPT9cIixyPVwiYW5kIGZhbHNlIHRoZW4gZGVmaW5lZCBtb2R1bGUgaW4gcmV0dXJuIHJlZG8gaWYgQkVHSU4gcmV0cnkgZW5kIGZvciB0cnVlIHNlbGYgd2hlbiBuZXh0IHVudGlsIGRvIGJlZ2luIHVubGVzcyBFTkQgcmVzY3VlIG5pbCBlbHNlIGJyZWFrIHVuZGVmIG5vdCBzdXBlciBjbGFzcyBjYXNlIHJlcXVpcmUgeWllbGQgYWxpYXMgd2hpbGUgZW5zdXJlIGVsc2lmIG9yIGluY2x1ZGUgYXR0cl9yZWFkZXIgYXR0cl93cml0ZXIgYXR0cl9hY2Nlc3NvclwiLGI9e2NOOlwiZG9jdGFnXCIsYjpcIkBbQS1aYS16XStcIn0sYT17Y046XCJ2YWx1ZVwiLGI6XCIjPFwiLGU6XCI+XCJ9LG49W2UuQyhcIiNcIixcIiRcIix7YzpbYl19KSxlLkMoXCJeXFxcXD1iZWdpblwiLFwiXlxcXFw9ZW5kXCIse2M6W2JdLHI6MTB9KSxlLkMoXCJeX19FTkRfX1wiLFwiXFxcXG4kXCIpXSxzPXtjTjpcInN1YnN0XCIsYjpcIiNcXFxce1wiLGU6XCJ9XCIsazpyfSx0PXtjTjpcInN0cmluZ1wiLGM6W2UuQkUsc10sdjpbe2I6LycvLGU6LycvfSx7YjovXCIvLGU6L1wiL30se2I6L2AvLGU6L2AvfSx7YjpcIiVbcVF3V3hdP1xcXFwoXCIsZTpcIlxcXFwpXCJ9LHtiOlwiJVtxUXdXeF0/XFxcXFtcIixlOlwiXFxcXF1cIn0se2I6XCIlW3FRd1d4XT97XCIsZTpcIn1cIn0se2I6XCIlW3FRd1d4XT88XCIsZTpcIj5cIn0se2I6XCIlW3FRd1d4XT8vXCIsZTpcIi9cIn0se2I6XCIlW3FRd1d4XT8lXCIsZTpcIiVcIn0se2I6XCIlW3FRd1d4XT8tXCIsZTpcIi1cIn0se2I6XCIlW3FRd1d4XT9cXFxcfFwiLGU6XCJcXFxcfFwifSx7YjovXFxCXFw/KFxcXFxcXGR7MSwzfXxcXFxceFtBLUZhLWYwLTldezEsMn18XFxcXHVbQS1GYS1mMC05XXs0fXxcXFxcP1xcUylcXGIvfV19LGk9e2NOOlwicGFyYW1zXCIsYjpcIlxcXFwoXCIsZTpcIlxcXFwpXCIsazpyfSxkPVt0LGEse2NOOlwiY2xhc3NcIixiSzpcImNsYXNzIG1vZHVsZVwiLGU6XCIkfDtcIixpOi89LyxjOltlLmluaGVyaXQoZS5UTSx7YjpcIltBLVphLXpfXVxcXFx3Kig6OlxcXFx3KykqKFxcXFw/fFxcXFwhKT9cIn0pLHtjTjpcImluaGVyaXRhbmNlXCIsYjpcIjxcXFxccypcIixjOlt7Y046XCJwYXJlbnRcIixiOlwiKFwiK2UuSVIrXCI6Oik/XCIrZS5JUn1dfV0uY29uY2F0KG4pfSx7Y046XCJmdW5jdGlvblwiLGJLOlwiZGVmXCIsZTpcIiB8JHw7XCIscjowLGM6W2UuaW5oZXJpdChlLlRNLHtiOmN9KSxpXS5jb25jYXQobil9LHtjTjpcImNvbnN0YW50XCIsYjpcIig6Oik/KFxcXFxiW0EtWl1cXFxcdyooOjopPykrXCIscjowfSx7Y046XCJzeW1ib2xcIixiOmUuVUlSK1wiKFxcXFwhfFxcXFw/KT86XCIscjowfSx7Y046XCJzeW1ib2xcIixiOlwiOlwiLGM6W3Qse2I6Y31dLHI6MH0se2NOOlwibnVtYmVyXCIsYjpcIihcXFxcYjBbMC03X10rKXwoXFxcXGIweFswLTlhLWZBLUZfXSspfChcXFxcYlsxLTldWzAtOV9dKihcXFxcLlswLTlfXSspPyl8WzBfXVxcXFxiXCIscjowfSx7Y046XCJ2YXJpYWJsZVwiLGI6XCIoXFxcXCRcXFxcVyl8KChcXFxcJHxcXFxcQFxcXFxAPykoXFxcXHcrKSlcIn0se2I6XCIoXCIrZS5SU1IrXCIpXFxcXHMqXCIsYzpbYSx7Y046XCJyZWdleHBcIixjOltlLkJFLHNdLGk6L1xcbi8sdjpbe2I6XCIvXCIsZTpcIi9bYS16XSpcIn0se2I6XCIlcntcIixlOlwifVthLXpdKlwifSx7YjpcIiVyXFxcXChcIixlOlwiXFxcXClbYS16XSpcIn0se2I6XCIlciFcIixlOlwiIVthLXpdKlwifSx7YjpcIiVyXFxcXFtcIixlOlwiXFxcXF1bYS16XSpcIn1dfV0uY29uY2F0KG4pLHI6MH1dLmNvbmNhdChuKTtzLmM9ZCxpLmM9ZDt2YXIgbz1cIls+P10+XCIsbD1cIltcXFxcdyNdK1xcXFwoXFxcXHcrXFxcXCk6XFxcXGQrOlxcXFxkKz5cIix1PVwiKFxcXFx3Ky0pP1xcXFxkK1xcXFwuXFxcXGQrXFxcXC5cXFxcZChwXFxcXGQrKT9bXj5dKz5cIixOPVt7YjovXlxccyo9Pi8sY046XCJzdGF0dXNcIixzdGFydHM6e2U6XCIkXCIsYzpkfX0se2NOOlwicHJvbXB0XCIsYjpcIl4oXCIrbytcInxcIitsK1wifFwiK3UrXCIpXCIsc3RhcnRzOntlOlwiJFwiLGM6ZH19XTtyZXR1cm57YWxpYXNlczpbXCJyYlwiLFwiZ2Vtc3BlY1wiLFwicG9kc3BlY1wiLFwidGhvclwiLFwiaXJiXCJdLGs6cixjOm4uY29uY2F0KE4pLmNvbmNhdChkKX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJvYmplY3RpdmVjXCIsZnVuY3Rpb24oZSl7dmFyIHQ9e2NOOlwiYnVpbHRfaW5cIixiOlwiKEFWfENBfENGfENHfENJfE1LfE1QfE5TfFVJKVxcXFx3K1wifSxpPXtrZXl3b3JkOlwiaW50IGZsb2F0IHdoaWxlIGNoYXIgZXhwb3J0IHNpemVvZiB0eXBlZGVmIGNvbnN0IHN0cnVjdCBmb3IgdW5pb24gdW5zaWduZWQgbG9uZyB2b2xhdGlsZSBzdGF0aWMgYm9vbCBtdXRhYmxlIGlmIGRvIHJldHVybiBnb3RvIHZvaWQgZW51bSBlbHNlIGJyZWFrIGV4dGVybiBhc20gY2FzZSBzaG9ydCBkZWZhdWx0IGRvdWJsZSByZWdpc3RlciBleHBsaWNpdCBzaWduZWQgdHlwZW5hbWUgdGhpcyBzd2l0Y2ggY29udGludWUgd2NoYXJfdCBpbmxpbmUgcmVhZG9ubHkgYXNzaWduIHJlYWR3cml0ZSBzZWxmIEBzeW5jaHJvbml6ZWQgaWQgdHlwZW9mIG5vbmF0b21pYyBzdXBlciB1bmljaGFyIElCT3V0bGV0IElCQWN0aW9uIHN0cm9uZyB3ZWFrIGNvcHkgaW4gb3V0IGlub3V0IGJ5Y29weSBieXJlZiBvbmV3YXkgX19zdHJvbmcgX193ZWFrIF9fYmxvY2sgX19hdXRvcmVsZWFzaW5nIEBwcml2YXRlIEBwcm90ZWN0ZWQgQHB1YmxpYyBAdHJ5IEBwcm9wZXJ0eSBAZW5kIEB0aHJvdyBAY2F0Y2ggQGZpbmFsbHkgQGF1dG9yZWxlYXNlcG9vbCBAc3ludGhlc2l6ZSBAZHluYW1pYyBAc2VsZWN0b3IgQG9wdGlvbmFsIEByZXF1aXJlZFwiLGxpdGVyYWw6XCJmYWxzZSB0cnVlIEZBTFNFIFRSVUUgbmlsIFlFUyBOTyBOVUxMXCIsYnVpbHRfaW46XCJCT09MIGRpc3BhdGNoX29uY2VfdCBkaXNwYXRjaF9xdWV1ZV90IGRpc3BhdGNoX3N5bmMgZGlzcGF0Y2hfYXN5bmMgZGlzcGF0Y2hfb25jZVwifSxvPS9bYS16QS1aQF1bYS16QS1aMC05X10qLyxuPVwiQGludGVyZmFjZSBAY2xhc3MgQHByb3RvY29sIEBpbXBsZW1lbnRhdGlvblwiO3JldHVybnthbGlhc2VzOltcIm1tXCIsXCJvYmpjXCIsXCJvYmotY1wiXSxrOmksbDpvLGk6XCI8L1wiLGM6W3QsZS5DTENNLGUuQ0JDTSxlLkNOTSxlLlFTTSx7Y046XCJzdHJpbmdcIix2Olt7YjonQFwiJyxlOidcIicsaTpcIlxcXFxuXCIsYzpbZS5CRV19LHtiOlwiJ1wiLGU6XCJbXlxcXFxcXFxcXSdcIixpOlwiW15cXFxcXFxcXF1bXiddXCJ9XX0se2NOOlwicHJlcHJvY2Vzc29yXCIsYjpcIiNcIixlOlwiJFwiLGM6W3tjTjpcInRpdGxlXCIsdjpbe2I6J1wiJyxlOidcIid9LHtiOlwiPFwiLGU6XCI+XCJ9XX1dfSx7Y046XCJjbGFzc1wiLGI6XCIoXCIrbi5zcGxpdChcIiBcIikuam9pbihcInxcIikrXCIpXFxcXGJcIixlOlwiKHt8JClcIixlRTohMCxrOm4sbDpvLGM6W2UuVVRNXX0se2NOOlwidmFyaWFibGVcIixiOlwiXFxcXC5cIitlLlVJUixyOjB9XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJqYXZhc2NyaXB0XCIsZnVuY3Rpb24oZSl7cmV0dXJue2FsaWFzZXM6W1wianNcIl0sazp7a2V5d29yZDpcImluIG9mIGlmIGZvciB3aGlsZSBmaW5hbGx5IHZhciBuZXcgZnVuY3Rpb24gZG8gcmV0dXJuIHZvaWQgZWxzZSBicmVhayBjYXRjaCBpbnN0YW5jZW9mIHdpdGggdGhyb3cgY2FzZSBkZWZhdWx0IHRyeSB0aGlzIHN3aXRjaCBjb250aW51ZSB0eXBlb2YgZGVsZXRlIGxldCB5aWVsZCBjb25zdCBleHBvcnQgc3VwZXIgZGVidWdnZXIgYXMgYXN5bmMgYXdhaXRcIixsaXRlcmFsOlwidHJ1ZSBmYWxzZSBudWxsIHVuZGVmaW5lZCBOYU4gSW5maW5pdHlcIixidWlsdF9pbjpcImV2YWwgaXNGaW5pdGUgaXNOYU4gcGFyc2VGbG9hdCBwYXJzZUludCBkZWNvZGVVUkkgZGVjb2RlVVJJQ29tcG9uZW50IGVuY29kZVVSSSBlbmNvZGVVUklDb21wb25lbnQgZXNjYXBlIHVuZXNjYXBlIE9iamVjdCBGdW5jdGlvbiBCb29sZWFuIEVycm9yIEV2YWxFcnJvciBJbnRlcm5hbEVycm9yIFJhbmdlRXJyb3IgUmVmZXJlbmNlRXJyb3IgU3RvcEl0ZXJhdGlvbiBTeW50YXhFcnJvciBUeXBlRXJyb3IgVVJJRXJyb3IgTnVtYmVyIE1hdGggRGF0ZSBTdHJpbmcgUmVnRXhwIEFycmF5IEZsb2F0MzJBcnJheSBGbG9hdDY0QXJyYXkgSW50MTZBcnJheSBJbnQzMkFycmF5IEludDhBcnJheSBVaW50MTZBcnJheSBVaW50MzJBcnJheSBVaW50OEFycmF5IFVpbnQ4Q2xhbXBlZEFycmF5IEFycmF5QnVmZmVyIERhdGFWaWV3IEpTT04gSW50bCBhcmd1bWVudHMgcmVxdWlyZSBtb2R1bGUgY29uc29sZSB3aW5kb3cgZG9jdW1lbnQgU3ltYm9sIFNldCBNYXAgV2Vha1NldCBXZWFrTWFwIFByb3h5IFJlZmxlY3QgUHJvbWlzZVwifSxjOlt7Y046XCJwaVwiLHI6MTAsYjovXlxccypbJ1wiXXVzZSAoc3RyaWN0fGFzbSlbJ1wiXS99LGUuQVNNLGUuUVNNLHtjTjpcInN0cmluZ1wiLGI6XCJgXCIsZTpcImBcIixjOltlLkJFLHtjTjpcInN1YnN0XCIsYjpcIlxcXFwkXFxcXHtcIixlOlwiXFxcXH1cIn1dfSxlLkNMQ00sZS5DQkNNLHtjTjpcIm51bWJlclwiLHY6W3tiOlwiXFxcXGIoMFtiQl1bMDFdKylcIn0se2I6XCJcXFxcYigwW29PXVswLTddKylcIn0se2I6ZS5DTlJ9XSxyOjB9LHtiOlwiKFwiK2UuUlNSK1wifFxcXFxiKGNhc2V8cmV0dXJufHRocm93KVxcXFxiKVxcXFxzKlwiLGs6XCJyZXR1cm4gdGhyb3cgY2FzZVwiLGM6W2UuQ0xDTSxlLkNCQ00sZS5STSx7YjovPC8sZTovPlxccypbKTtcXF1dLyxyOjAsc0w6XCJ4bWxcIn1dLHI6MH0se2NOOlwiZnVuY3Rpb25cIixiSzpcImZ1bmN0aW9uXCIsZTovXFx7LyxlRTohMCxjOltlLmluaGVyaXQoZS5UTSx7YjovW0EtWmEteiRfXVswLTlBLVphLXokX10qL30pLHtjTjpcInBhcmFtc1wiLGI6L1xcKC8sZTovXFwpLyxlQjohMCxlRTohMCxjOltlLkNMQ00sZS5DQkNNXSxpOi9bXCInXFwoXS99XSxpOi9cXFt8JS99LHtiOi9cXCRbKC5dL30se2I6XCJcXFxcLlwiK2UuSVIscjowfSx7Yks6XCJpbXBvcnRcIixlOlwiWzskXVwiLGs6XCJpbXBvcnQgZnJvbSBhc1wiLGM6W2UuQVNNLGUuUVNNXX0se2NOOlwiY2xhc3NcIixiSzpcImNsYXNzXCIsZTovW3s7PV0vLGVFOiEwLGk6L1s6XCJcXFtcXF1dLyxjOlt7Yks6XCJleHRlbmRzXCJ9LGUuVVRNXX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcIm5naW54XCIsZnVuY3Rpb24oZSl7dmFyIHI9e2NOOlwidmFyaWFibGVcIix2Olt7YjovXFwkXFxkKy99LHtiOi9cXCRcXHsvLGU6L30vfSx7YjpcIltcXFxcJFxcXFxAXVwiK2UuVUlSfV19LGI9e2VXOiEwLGw6XCJbYS16L19dK1wiLGs6e2J1aWx0X2luOlwib24gb2ZmIHllcyBubyB0cnVlIGZhbHNlIG5vbmUgYmxvY2tlZCBkZWJ1ZyBpbmZvIG5vdGljZSB3YXJuIGVycm9yIGNyaXQgc2VsZWN0IGJyZWFrIGxhc3QgcGVybWFuZW50IHJlZGlyZWN0IGtxdWV1ZSBydHNpZyBlcG9sbCBwb2xsIC9kZXYvcG9sbFwifSxyOjAsaTpcIj0+XCIsYzpbZS5IQ00se2NOOlwic3RyaW5nXCIsYzpbZS5CRSxyXSx2Olt7YjovXCIvLGU6L1wiL30se2I6LycvLGU6LycvfV19LHtjTjpcInVybFwiLGI6XCIoW2Etel0rKTovXCIsZTpcIlxcXFxzXCIsZVc6ITAsZUU6ITAsYzpbcl19LHtjTjpcInJlZ2V4cFwiLGM6W2UuQkUscl0sdjpbe2I6XCJcXFxcc1xcXFxeXCIsZTpcIlxcXFxzfHt8O1wiLHJFOiEwfSx7YjpcIn5cXFxcKj9cXFxccytcIixlOlwiXFxcXHN8e3w7XCIsckU6ITB9LHtiOlwiXFxcXCooXFxcXC5bYS16XFxcXC1dKykrXCJ9LHtiOlwiKFthLXpcXFxcLV0rXFxcXC4pK1xcXFwqXCJ9XX0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFxiXFxcXGR7MSwzfVxcXFwuXFxcXGR7MSwzfVxcXFwuXFxcXGR7MSwzfVxcXFwuXFxcXGR7MSwzfSg6XFxcXGR7MSw1fSk/XFxcXGJcIn0se2NOOlwibnVtYmVyXCIsYjpcIlxcXFxiXFxcXGQrW2tLbU1nR2RzaGR3eV0qXFxcXGJcIixyOjB9LHJdfTtyZXR1cm57YWxpYXNlczpbXCJuZ2lueGNvbmZcIl0sYzpbZS5IQ00se2I6ZS5VSVIrXCJcXFxcc1wiLGU6XCI7fHtcIixyQjohMCxjOlt7Y046XCJ0aXRsZVwiLGI6ZS5VSVIsc3RhcnRzOmJ9XSxyOjB9XSxpOlwiW15cXFxcc1xcXFx9XVwifX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcIm1hcmtkb3duXCIsZnVuY3Rpb24oZSl7cmV0dXJue2FsaWFzZXM6W1wibWRcIixcIm1rZG93blwiLFwibWtkXCJdLGM6W3tjTjpcImhlYWRlclwiLHY6W3tiOlwiXiN7MSw2fVwiLGU6XCIkXCJ9LHtiOlwiXi4rP1xcXFxuWz0tXXsyLH0kXCJ9XX0se2I6XCI8XCIsZTpcIj5cIixzTDpcInhtbFwiLHI6MH0se2NOOlwiYnVsbGV0XCIsYjpcIl4oWyorLV18KFxcXFxkK1xcXFwuKSlcXFxccytcIn0se2NOOlwic3Ryb25nXCIsYjpcIlsqX117Mn0uKz9bKl9dezJ9XCJ9LHtjTjpcImVtcGhhc2lzXCIsdjpbe2I6XCJcXFxcKi4rP1xcXFwqXCJ9LHtiOlwiXy4rP19cIixyOjB9XX0se2NOOlwiYmxvY2txdW90ZVwiLGI6XCJePlxcXFxzK1wiLGU6XCIkXCJ9LHtjTjpcImNvZGVcIix2Olt7YjpcImAuKz9gXCJ9LHtiOlwiXiggezR9fFx0KVwiLGU6XCIkXCIscjowfV19LHtjTjpcImhvcml6b250YWxfcnVsZVwiLGI6XCJeWy1cXFxcKl17Myx9XCIsZTpcIiRcIn0se2I6XCJcXFxcWy4rP1xcXFxdW1xcXFwoXFxcXFtdLio/W1xcXFwpXFxcXF1dXCIsckI6ITAsYzpbe2NOOlwibGlua19sYWJlbFwiLGI6XCJcXFxcW1wiLGU6XCJcXFxcXVwiLGVCOiEwLHJFOiEwLHI6MH0se2NOOlwibGlua191cmxcIixiOlwiXFxcXF1cXFxcKFwiLGU6XCJcXFxcKVwiLGVCOiEwLGVFOiEwfSx7Y046XCJsaW5rX3JlZmVyZW5jZVwiLGI6XCJcXFxcXVxcXFxbXCIsZTpcIlxcXFxdXCIsZUI6ITAsZUU6ITB9XSxyOjEwfSx7YjpcIl5cXFxcWy4rXFxcXF06XCIsckI6ITAsYzpbe2NOOlwibGlua19yZWZlcmVuY2VcIixiOlwiXFxcXFtcIixlOlwiXFxcXF06XCIsZUI6ITAsZUU6ITAsc3RhcnRzOntjTjpcImxpbmtfdXJsXCIsZTpcIiRcIn19XX1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImpzb25cIixmdW5jdGlvbihlKXt2YXIgdD17bGl0ZXJhbDpcInRydWUgZmFsc2UgbnVsbFwifSxpPVtlLlFTTSxlLkNOTV0sbD17Y046XCJ2YWx1ZVwiLGU6XCIsXCIsZVc6ITAsZUU6ITAsYzppLGs6dH0sYz17YjpcIntcIixlOlwifVwiLGM6W3tjTjpcImF0dHJpYnV0ZVwiLGI6J1xcXFxzKlwiJyxlOidcIlxcXFxzKjpcXFxccyonLGVCOiEwLGVFOiEwLGM6W2UuQkVdLGk6XCJcXFxcblwiLHN0YXJ0czpsfV0saTpcIlxcXFxTXCJ9LG49e2I6XCJcXFxcW1wiLGU6XCJcXFxcXVwiLGM6W2UuaW5oZXJpdChsLHtjTjpudWxsfSldLGk6XCJcXFxcU1wifTtyZXR1cm4gaS5zcGxpY2UoaS5sZW5ndGgsMCxjLG4pLHtjOmksazp0LGk6XCJcXFxcU1wifX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcInBocFwiLGZ1bmN0aW9uKGUpe3ZhciBjPXtjTjpcInZhcmlhYmxlXCIsYjpcIlxcXFwkK1thLXpBLVpffy3Dv11bYS16QS1aMC05X38tw79dKlwifSxhPXtjTjpcInByZXByb2Nlc3NvclwiLGI6LzxcXD8ocGhwKT98XFw/Pi99LGk9e2NOOlwic3RyaW5nXCIsYzpbZS5CRSxhXSx2Olt7YjonYlwiJyxlOidcIid9LHtiOlwiYidcIixlOlwiJ1wifSxlLmluaGVyaXQoZS5BU00se2k6bnVsbH0pLGUuaW5oZXJpdChlLlFTTSx7aTpudWxsfSldfSxuPXt2OltlLkJOTSxlLkNOTV19O3JldHVybnthbGlhc2VzOltcInBocDNcIixcInBocDRcIixcInBocDVcIixcInBocDZcIl0sY0k6ITAsazpcImFuZCBpbmNsdWRlX29uY2UgbGlzdCBhYnN0cmFjdCBnbG9iYWwgcHJpdmF0ZSBlY2hvIGludGVyZmFjZSBhcyBzdGF0aWMgZW5kc3dpdGNoIGFycmF5IG51bGwgaWYgZW5kd2hpbGUgb3IgY29uc3QgZm9yIGVuZGZvcmVhY2ggc2VsZiB2YXIgd2hpbGUgaXNzZXQgcHVibGljIHByb3RlY3RlZCBleGl0IGZvcmVhY2ggdGhyb3cgZWxzZWlmIGluY2x1ZGUgX19GSUxFX18gZW1wdHkgcmVxdWlyZV9vbmNlIGRvIHhvciByZXR1cm4gcGFyZW50IGNsb25lIHVzZSBfX0NMQVNTX18gX19MSU5FX18gZWxzZSBicmVhayBwcmludCBldmFsIG5ldyBjYXRjaCBfX01FVEhPRF9fIGNhc2UgZXhjZXB0aW9uIGRlZmF1bHQgZGllIHJlcXVpcmUgX19GVU5DVElPTl9fIGVuZGRlY2xhcmUgZmluYWwgdHJ5IHN3aXRjaCBjb250aW51ZSBlbmRmb3IgZW5kaWYgZGVjbGFyZSB1bnNldCB0cnVlIGZhbHNlIHRyYWl0IGdvdG8gaW5zdGFuY2VvZiBpbnN0ZWFkb2YgX19ESVJfXyBfX05BTUVTUEFDRV9fIHlpZWxkIGZpbmFsbHlcIixjOltlLkNMQ00sZS5IQ00sZS5DKFwiL1xcXFwqXCIsXCJcXFxcKi9cIix7Yzpbe2NOOlwiZG9jdGFnXCIsYjpcIkBbQS1aYS16XStcIn0sYV19KSxlLkMoXCJfX2hhbHRfY29tcGlsZXIuKz87XCIsITEse2VXOiEwLGs6XCJfX2hhbHRfY29tcGlsZXJcIixsOmUuVUlSfSkse2NOOlwic3RyaW5nXCIsYjpcIjw8PFsnXFxcIl0/XFxcXHcrWydcXFwiXT8kXCIsZTpcIl5cXFxcdys7XCIsYzpbZS5CRV19LGEsYyx7YjovKDo6fC0+KStbYS16QS1aX1xceDdmLVxceGZmXVthLXpBLVowLTlfXFx4N2YtXFx4ZmZdKi99LHtjTjpcImZ1bmN0aW9uXCIsYks6XCJmdW5jdGlvblwiLGU6L1s7e10vLGVFOiEwLGk6XCJcXFxcJHxcXFxcW3wlXCIsYzpbZS5VVE0se2NOOlwicGFyYW1zXCIsYjpcIlxcXFwoXCIsZTpcIlxcXFwpXCIsYzpbXCJzZWxmXCIsYyxlLkNCQ00saSxuXX1dfSx7Y046XCJjbGFzc1wiLGJLOlwiY2xhc3MgaW50ZXJmYWNlXCIsZTpcIntcIixlRTohMCxpOi9bOlxcKFxcJFwiXS8sYzpbe2JLOlwiZXh0ZW5kcyBpbXBsZW1lbnRzXCJ9LGUuVVRNXX0se2JLOlwibmFtZXNwYWNlXCIsZTpcIjtcIixpOi9bXFwuJ10vLGM6W2UuVVRNXX0se2JLOlwidXNlXCIsZTpcIjtcIixjOltlLlVUTV19LHtiOlwiPT5cIn0saSxuXX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJkaWZmXCIsZnVuY3Rpb24oZSl7cmV0dXJue2FsaWFzZXM6W1wicGF0Y2hcIl0sYzpbe2NOOlwiY2h1bmtcIixyOjEwLHY6W3tiOi9eQEAgK1xcLVxcZCssXFxkKyArXFwrXFxkKyxcXGQrICtAQCQvfSx7YjovXlxcKlxcKlxcKiArXFxkKyxcXGQrICtcXCpcXCpcXCpcXCokL30se2I6L15cXC1cXC1cXC0gK1xcZCssXFxkKyArXFwtXFwtXFwtXFwtJC99XX0se2NOOlwiaGVhZGVyXCIsdjpbe2I6L0luZGV4OiAvLGU6LyQvfSx7YjovPT09PT0vLGU6Lz09PT09JC99LHtiOi9eXFwtXFwtXFwtLyxlOi8kL30se2I6L15cXCp7M30gLyxlOi8kL30se2I6L15cXCtcXCtcXCsvLGU6LyQvfSx7YjovXFwqezV9LyxlOi9cXCp7NX0kL31dfSx7Y046XCJhZGRpdGlvblwiLGI6XCJeXFxcXCtcIixlOlwiJFwifSx7Y046XCJkZWxldGlvblwiLGI6XCJeXFxcXC1cIixlOlwiJFwifSx7Y046XCJjaGFuZ2VcIixiOlwiXlxcXFwhXCIsZTpcIiRcIn1dfX0pO2hsanMucmVnaXN0ZXJMYW5ndWFnZShcImFwYWNoZVwiLGZ1bmN0aW9uKGUpe3ZhciByPXtjTjpcIm51bWJlclwiLGI6XCJbXFxcXCQlXVxcXFxkK1wifTtyZXR1cm57YWxpYXNlczpbXCJhcGFjaGVjb25mXCJdLGNJOiEwLGM6W2UuSENNLHtjTjpcInRhZ1wiLGI6XCI8Lz9cIixlOlwiPlwifSx7Y046XCJrZXl3b3JkXCIsYjovXFx3Ky8scjowLGs6e2NvbW1vbjpcIm9yZGVyIGRlbnkgYWxsb3cgc2V0ZW52IHJld3JpdGVydWxlIHJld3JpdGVlbmdpbmUgcmV3cml0ZWNvbmQgZG9jdW1lbnRyb290IHNldGhhbmRsZXIgZXJyb3Jkb2N1bWVudCBsb2FkbW9kdWxlIG9wdGlvbnMgaGVhZGVyIGxpc3RlbiBzZXJ2ZXJyb290IHNlcnZlcm5hbWVcIn0sc3RhcnRzOntlOi8kLyxyOjAsazp7bGl0ZXJhbDpcIm9uIG9mZiBhbGxcIn0sYzpbe2NOOlwic3FicmFja2V0XCIsYjpcIlxcXFxzXFxcXFtcIixlOlwiXFxcXF0kXCJ9LHtjTjpcImNicmFja2V0XCIsYjpcIltcXFxcJCVdXFxcXHtcIixlOlwiXFxcXH1cIixjOltcInNlbGZcIixyXX0scixlLlFTTV19fV0saTovXFxTL319KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJodHRwXCIsZnVuY3Rpb24odCl7cmV0dXJue2FsaWFzZXM6W1wiaHR0cHNcIl0saTpcIlxcXFxTXCIsYzpbe2NOOlwic3RhdHVzXCIsYjpcIl5IVFRQL1swLTlcXFxcLl0rXCIsZTpcIiRcIixjOlt7Y046XCJudW1iZXJcIixiOlwiXFxcXGJcXFxcZHszfVxcXFxiXCJ9XX0se2NOOlwicmVxdWVzdFwiLGI6XCJeW0EtWl0rICguKj8pIEhUVFAvWzAtOVxcXFwuXSskXCIsckI6ITAsZTpcIiRcIixjOlt7Y046XCJzdHJpbmdcIixiOlwiIFwiLGU6XCIgXCIsZUI6ITAsZUU6ITB9XX0se2NOOlwiYXR0cmlidXRlXCIsYjpcIl5cXFxcd1wiLGU6XCI6IFwiLGVFOiEwLGk6XCJcXFxcbnxcXFxcc3w9XCIsc3RhcnRzOntjTjpcInN0cmluZ1wiLGU6XCIkXCJ9fSx7YjpcIlxcXFxuXFxcXG5cIixzdGFydHM6e3NMOlwiXCIsZVc6ITB9fV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiY3NzXCIsZnVuY3Rpb24oZSl7dmFyIGM9XCJbYS16QS1aLV1bYS16QS1aMC05Xy1dKlwiLGE9e2NOOlwiZnVuY3Rpb25cIixiOmMrXCJcXFxcKFwiLHJCOiEwLGVFOiEwLGU6XCJcXFxcKFwifSxyPXtjTjpcInJ1bGVcIixiOi9bQS1aXFxfXFwuXFwtXStcXHMqOi8sckI6ITAsZTpcIjtcIixlVzohMCxjOlt7Y046XCJhdHRyaWJ1dGVcIixiOi9cXFMvLGU6XCI6XCIsZUU6ITAsc3RhcnRzOntjTjpcInZhbHVlXCIsZVc6ITAsZUU6ITAsYzpbYSxlLkNTU05NLGUuUVNNLGUuQVNNLGUuQ0JDTSx7Y046XCJoZXhjb2xvclwiLGI6XCIjWzAtOUEtRmEtZl0rXCJ9LHtjTjpcImltcG9ydGFudFwiLGI6XCIhaW1wb3J0YW50XCJ9XX19XX07cmV0dXJue2NJOiEwLGk6L1s9XFwvfCdcXCRdLyxjOltlLkNCQ00scix7Y046XCJpZFwiLGI6L1xcI1tBLVphLXowLTlfLV0rL30se2NOOlwiY2xhc3NcIixiOi9cXC5bQS1aYS16MC05Xy1dKy99LHtjTjpcImF0dHJfc2VsZWN0b3JcIixiOi9cXFsvLGU6L1xcXS8saTpcIiRcIn0se2NOOlwicHNldWRvXCIsYjovOig6KT9bYS16QS1aMC05XFxfXFwtXFwrXFwoXFwpXCInXSsvfSx7Y046XCJhdF9ydWxlXCIsYjpcIkAoZm9udC1mYWNlfHBhZ2UpXCIsbDpcIlthLXotXStcIixrOlwiZm9udC1mYWNlIHBhZ2VcIn0se2NOOlwiYXRfcnVsZVwiLGI6XCJAXCIsZTpcIlt7O11cIixjOlt7Y046XCJrZXl3b3JkXCIsYjovXFxTKy99LHtiOi9cXHMvLGVXOiEwLGVFOiEwLHI6MCxjOlthLGUuQVNNLGUuUVNNLGUuQ1NTTk1dfV19LHtjTjpcInRhZ1wiLGI6YyxyOjB9LHtjTjpcInJ1bGVzXCIsYjpcIntcIixlOlwifVwiLGk6L1xcUy8sYzpbZS5DQkNNLHJdfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiY3NcIixmdW5jdGlvbihlKXt2YXIgcj1cImFic3RyYWN0IGFzIGJhc2UgYm9vbCBicmVhayBieXRlIGNhc2UgY2F0Y2ggY2hhciBjaGVja2VkIGNvbnN0IGNvbnRpbnVlIGRlY2ltYWwgZHluYW1pYyBkZWZhdWx0IGRlbGVnYXRlIGRvIGRvdWJsZSBlbHNlIGVudW0gZXZlbnQgZXhwbGljaXQgZXh0ZXJuIGZhbHNlIGZpbmFsbHkgZml4ZWQgZmxvYXQgZm9yIGZvcmVhY2ggZ290byBpZiBpbXBsaWNpdCBpbiBpbnQgaW50ZXJmYWNlIGludGVybmFsIGlzIGxvY2sgbG9uZyBudWxsIHdoZW4gb2JqZWN0IG9wZXJhdG9yIG91dCBvdmVycmlkZSBwYXJhbXMgcHJpdmF0ZSBwcm90ZWN0ZWQgcHVibGljIHJlYWRvbmx5IHJlZiBzYnl0ZSBzZWFsZWQgc2hvcnQgc2l6ZW9mIHN0YWNrYWxsb2Mgc3RhdGljIHN0cmluZyBzdHJ1Y3Qgc3dpdGNoIHRoaXMgdHJ1ZSB0cnkgdHlwZW9mIHVpbnQgdWxvbmcgdW5jaGVja2VkIHVuc2FmZSB1c2hvcnQgdXNpbmcgdmlydHVhbCB2b2xhdGlsZSB2b2lkIHdoaWxlIGFzeW5jIHByb3RlY3RlZCBwdWJsaWMgcHJpdmF0ZSBpbnRlcm5hbCBhc2NlbmRpbmcgZGVzY2VuZGluZyBmcm9tIGdldCBncm91cCBpbnRvIGpvaW4gbGV0IG9yZGVyYnkgcGFydGlhbCBzZWxlY3Qgc2V0IHZhbHVlIHZhciB3aGVyZSB5aWVsZFwiLHQ9ZS5JUitcIig8XCIrZS5JUitcIj4pP1wiO3JldHVybnthbGlhc2VzOltcImNzaGFycFwiXSxrOnIsaTovOjovLGM6W2UuQyhcIi8vL1wiLFwiJFwiLHtyQjohMCxjOlt7Y046XCJ4bWxEb2NUYWdcIix2Olt7YjpcIi8vL1wiLHI6MH0se2I6XCI8IS0tfC0tPlwifSx7YjpcIjwvP1wiLGU6XCI+XCJ9XX1dfSksZS5DTENNLGUuQ0JDTSx7Y046XCJwcmVwcm9jZXNzb3JcIixiOlwiI1wiLGU6XCIkXCIsazpcImlmIGVsc2UgZWxpZiBlbmRpZiBkZWZpbmUgdW5kZWYgd2FybmluZyBlcnJvciBsaW5lIHJlZ2lvbiBlbmRyZWdpb24gcHJhZ21hIGNoZWNrc3VtXCJ9LHtjTjpcInN0cmluZ1wiLGI6J0BcIicsZTonXCInLGM6W3tiOidcIlwiJ31dfSxlLkFTTSxlLlFTTSxlLkNOTSx7Yks6XCJjbGFzcyBpbnRlcmZhY2VcIixlOi9bezs9XS8saTovW15cXHM6XS8sYzpbZS5UTSxlLkNMQ00sZS5DQkNNXX0se2JLOlwibmFtZXNwYWNlXCIsZTovW3s7PV0vLGk6L1teXFxzOl0vLGM6W3tjTjpcInRpdGxlXCIsYjpcIlthLXpBLVpdKFxcXFwuP1xcXFx3KSpcIixyOjB9LGUuQ0xDTSxlLkNCQ01dfSx7Yks6XCJuZXcgcmV0dXJuIHRocm93IGF3YWl0XCIscjowfSx7Y046XCJmdW5jdGlvblwiLGI6XCIoXCIrdCtcIlxcXFxzKykrXCIrZS5JUitcIlxcXFxzKlxcXFwoXCIsckI6ITAsZTovW3s7PV0vLGVFOiEwLGs6cixjOlt7YjplLklSK1wiXFxcXHMqXFxcXChcIixyQjohMCxjOltlLlRNXSxyOjB9LHtjTjpcInBhcmFtc1wiLGI6L1xcKC8sZTovXFwpLyxlQjohMCxlRTohMCxrOnIscjowLGM6W2UuQVNNLGUuUVNNLGUuQ05NLGUuQ0JDTV19LGUuQ0xDTSxlLkNCQ01dfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwieG1sXCIsZnVuY3Rpb24odCl7dmFyIGU9XCJbQS1aYS16MC05XFxcXC5fOi1dK1wiLHM9e2I6LzxcXD8ocGhwKT8oPyFcXHcpLyxlOi9cXD8+LyxzTDpcInBocFwiLHN1Ykxhbmd1YWdlTW9kZTpcImNvbnRpbnVvdXNcIn0sYz17ZVc6ITAsaTovPC8scjowLGM6W3Mse2NOOlwiYXR0cmlidXRlXCIsYjplLHI6MH0se2I6XCI9XCIscjowLGM6W3tjTjpcInZhbHVlXCIsYzpbc10sdjpbe2I6L1wiLyxlOi9cIi99LHtiOi8nLyxlOi8nL30se2I6L1teXFxzXFwvPl0rL31dfV19XX07cmV0dXJue2FsaWFzZXM6W1wiaHRtbFwiLFwieGh0bWxcIixcInJzc1wiLFwiYXRvbVwiLFwieHNsXCIsXCJwbGlzdFwiXSxjSTohMCxjOlt7Y046XCJkb2N0eXBlXCIsYjpcIjwhRE9DVFlQRVwiLGU6XCI+XCIscjoxMCxjOlt7YjpcIlxcXFxbXCIsZTpcIlxcXFxdXCJ9XX0sdC5DKFwiPCEtLVwiLFwiLS0+XCIse3I6MTB9KSx7Y046XCJjZGF0YVwiLGI6XCI8XFxcXCFcXFxcW0NEQVRBXFxcXFtcIixlOlwiXFxcXF1cXFxcXT5cIixyOjEwfSx7Y046XCJ0YWdcIixiOlwiPHN0eWxlKD89XFxcXHN8PnwkKVwiLGU6XCI+XCIsazp7dGl0bGU6XCJzdHlsZVwifSxjOltjXSxzdGFydHM6e2U6XCI8L3N0eWxlPlwiLHJFOiEwLHNMOlwiY3NzXCJ9fSx7Y046XCJ0YWdcIixiOlwiPHNjcmlwdCg/PVxcXFxzfD58JClcIixlOlwiPlwiLGs6e3RpdGxlOlwic2NyaXB0XCJ9LGM6W2NdLHN0YXJ0czp7ZTpcIjwvc2NyaXB0PlwiLHJFOiEwLHNMOlwiXCJ9fSxzLHtjTjpcInBpXCIsYjovPFxcP1xcdysvLGU6L1xcPz4vLHI6MTB9LHtjTjpcInRhZ1wiLGI6XCI8Lz9cIixlOlwiLz8+XCIsYzpbe2NOOlwidGl0bGVcIixiOi9bXiBcXC8+PFxcblxcdF0rLyxyOjB9LGNdfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwibWFrZWZpbGVcIixmdW5jdGlvbihlKXt2YXIgYT17Y046XCJ2YXJpYWJsZVwiLGI6L1xcJFxcKC8sZTovXFwpLyxjOltlLkJFXX07cmV0dXJue2FsaWFzZXM6W1wibWtcIixcIm1ha1wiXSxjOltlLkhDTSx7YjovXlxcdytcXHMqXFxXKj0vLHJCOiEwLHI6MCxzdGFydHM6e2NOOlwiY29uc3RhbnRcIixlOi9cXHMqXFxXKj0vLGVFOiEwLHN0YXJ0czp7ZTovJC8scjowLGM6W2FdfX19LHtjTjpcInRpdGxlXCIsYjovXltcXHddKzpcXHMqJC99LHtjTjpcInBob255XCIsYjovXlxcLlBIT05ZOi8sZTovJC8sazpcIi5QSE9OWVwiLGw6L1tcXC5cXHddKy99LHtiOi9eXFx0Ky8sZTovJC8scjowLGM6W2UuUVNNLGFdfV19fSk7aGxqcy5yZWdpc3Rlckxhbmd1YWdlKFwiaW5pXCIsZnVuY3Rpb24oZSl7cmV0dXJue2NJOiEwLGk6L1xcUy8sYzpbZS5DKFwiO1wiLFwiJFwiKSx7Y046XCJ0aXRsZVwiLGI6XCJeXFxcXFtcIixlOlwiXFxcXF1cIn0se2NOOlwic2V0dGluZ1wiLGI6XCJeW2EtejAtOVxcXFxbXFxcXF1fLV0rWyBcXFxcdF0qPVsgXFxcXHRdKlwiLGU6XCIkXCIsYzpbe2NOOlwidmFsdWVcIixlVzohMCxrOlwib24gb2ZmIHRydWUgZmFsc2UgeWVzIG5vXCIsYzpbZS5RU00sZS5OTV0scjowfV19XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJiYXNoXCIsZnVuY3Rpb24oZSl7dmFyIHQ9e2NOOlwidmFyaWFibGVcIix2Olt7YjovXFwkW1xcd1xcZCNAXVtcXHdcXGRfXSovfSx7YjovXFwkXFx7KC4qPyl9L31dfSxzPXtjTjpcInN0cmluZ1wiLGI6L1wiLyxlOi9cIi8sYzpbZS5CRSx0LHtjTjpcInZhcmlhYmxlXCIsYjovXFwkXFwoLyxlOi9cXCkvLGM6W2UuQkVdfV19LGE9e2NOOlwic3RyaW5nXCIsYjovJy8sZTovJy99O3JldHVybnthbGlhc2VzOltcInNoXCIsXCJ6c2hcIl0sbDovLT9bYS16XFwuXSsvLGs6e2tleXdvcmQ6XCJpZiB0aGVuIGVsc2UgZWxpZiBmaSBmb3Igd2hpbGUgaW4gZG8gZG9uZSBjYXNlIGVzYWMgZnVuY3Rpb25cIixsaXRlcmFsOlwidHJ1ZSBmYWxzZVwiLGJ1aWx0X2luOlwiYnJlYWsgY2QgY29udGludWUgZXZhbCBleGVjIGV4aXQgZXhwb3J0IGdldG9wdHMgaGFzaCBwd2QgcmVhZG9ubHkgcmV0dXJuIHNoaWZ0IHRlc3QgdGltZXMgdHJhcCB1bWFzayB1bnNldCBhbGlhcyBiaW5kIGJ1aWx0aW4gY2FsbGVyIGNvbW1hbmQgZGVjbGFyZSBlY2hvIGVuYWJsZSBoZWxwIGxldCBsb2NhbCBsb2dvdXQgbWFwZmlsZSBwcmludGYgcmVhZCByZWFkYXJyYXkgc291cmNlIHR5cGUgdHlwZXNldCB1bGltaXQgdW5hbGlhcyBzZXQgc2hvcHQgYXV0b2xvYWQgYmcgYmluZGtleSBieWUgY2FwIGNoZGlyIGNsb25lIGNvbXBhcmd1bWVudHMgY29tcGNhbGwgY29tcGN0bCBjb21wZGVzY3JpYmUgY29tcGZpbGVzIGNvbXBncm91cHMgY29tcHF1b3RlIGNvbXB0YWdzIGNvbXB0cnkgY29tcHZhbHVlcyBkaXJzIGRpc2FibGUgZGlzb3duIGVjaG90YyBlY2hvdGkgZW11bGF0ZSBmYyBmZyBmbG9hdCBmdW5jdGlvbnMgZ2V0Y2FwIGdldGxuIGhpc3RvcnkgaW50ZWdlciBqb2JzIGtpbGwgbGltaXQgbG9nIG5vZ2xvYiBwb3BkIHByaW50IHB1c2hkIHB1c2hsbiByZWhhc2ggc2NoZWQgc2V0Y2FwIHNldG9wdCBzdGF0IHN1c3BlbmQgdHR5Y3RsIHVuZnVuY3Rpb24gdW5oYXNoIHVubGltaXQgdW5zZXRvcHQgdmFyZWQgd2FpdCB3aGVuY2Ugd2hlcmUgd2hpY2ggemNvbXBpbGUgemZvcm1hdCB6ZnRwIHpsZSB6bW9kbG9hZCB6cGFyc2VvcHRzIHpwcm9mIHpwdHkgenJlZ2V4cGFyc2UgenNvY2tldCB6c3R5bGUgenRjcFwiLG9wZXJhdG9yOlwiLW5lIC1lcSAtbHQgLWd0IC1mIC1kIC1lIC1zIC1sIC1hXCJ9LGM6W3tjTjpcInNoZWJhbmdcIixiOi9eIyFbXlxcbl0rc2hcXHMqJC8scjoxMH0se2NOOlwiZnVuY3Rpb25cIixiOi9cXHdbXFx3XFxkX10qXFxzKlxcKFxccypcXClcXHMqXFx7LyxyQjohMCxjOltlLmluaGVyaXQoZS5UTSx7YjovXFx3W1xcd1xcZF9dKi99KV0scjowfSxlLkhDTSxlLk5NLHMsYSx0XX19KTtobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoXCJwZXJsXCIsZnVuY3Rpb24oZSl7dmFyIHQ9XCJnZXRwd2VudCBnZXRzZXJ2ZW50IHF1b3RlbWV0YSBtc2dyY3Ygc2NhbGFyIGtpbGwgZGJtY2xvc2UgdW5kZWYgbGMgbWEgc3lzd3JpdGUgdHIgc2VuZCB1bWFzayBzeXNvcGVuIHNobXdyaXRlIHZlYyBxeCB1dGltZSBsb2NhbCBvY3Qgc2VtY3RsIGxvY2FsdGltZSByZWFkcGlwZSBkbyByZXR1cm4gZm9ybWF0IHJlYWQgc3ByaW50ZiBkYm1vcGVuIHBvcCBnZXRwZ3JwIG5vdCBnZXRwd25hbSByZXdpbmRkaXIgcXFmaWxlbm8gcXcgZW5kcHJvdG9lbnQgd2FpdCBzZXRob3N0ZW50IGJsZXNzIHN8MCBvcGVuZGlyIGNvbnRpbnVlIGVhY2ggc2xlZXAgZW5kZ3JlbnQgc2h1dGRvd24gZHVtcCBjaG9tcCBjb25uZWN0IGdldHNvY2tuYW1lIGRpZSBzb2NrZXRwYWlyIGNsb3NlIGZsb2NrIGV4aXN0cyBpbmRleCBzaG1nZXRzdWIgZm9yIGVuZHB3ZW50IHJlZG8gbHN0YXQgbXNnY3RsIHNldHBncnAgYWJzIGV4aXQgc2VsZWN0IHByaW50IHJlZiBnZXRob3N0YnlhZGRyIHVuc2hpZnQgZmNudGwgc3lzY2FsbCBnb3RvIGdldG5ldGJ5YWRkciBqb2luIGdtdGltZSBzeW1saW5rIHNlbWdldCBzcGxpY2UgeHwwIGdldHBlZXJuYW1lIHJlY3YgbG9nIHNldHNvY2tvcHQgY29zIGxhc3QgcmV2ZXJzZSBnZXRob3N0YnluYW1lIGdldGdybmFtIHN0dWR5IGZvcm1saW5lIGVuZGhvc3RlbnQgdGltZXMgY2hvcCBsZW5ndGggZ2V0aG9zdGVudCBnZXRuZXRlbnQgcGFjayBnZXRwcm90b2VudCBnZXRzZXJ2YnluYW1lIHJhbmQgbWtkaXIgcG9zIGNobW9kIHl8MCBzdWJzdHIgZW5kbmV0ZW50IHByaW50ZiBuZXh0IG9wZW4gbXNnc25kIHJlYWRkaXIgdXNlIHVubGluayBnZXRzb2Nrb3B0IGdldHByaW9yaXR5IHJpbmRleCB3YW50YXJyYXkgaGV4IHN5c3RlbSBnZXRzZXJ2Ynlwb3J0IGVuZHNlcnZlbnQgaW50IGNociB1bnRpZSBybWRpciBwcm90b3R5cGUgdGVsbCBsaXN0ZW4gZm9yayBzaG1yZWFkIHVjZmlyc3Qgc2V0cHJvdG9lbnQgZWxzZSBzeXNzZWVrIGxpbmsgZ2V0Z3JnaWQgc2htY3RsIHdhaXRwaWQgdW5wYWNrIGdldG5ldGJ5bmFtZSByZXNldCBjaGRpciBncmVwIHNwbGl0IHJlcXVpcmUgY2FsbGVyIGxjZmlyc3QgdW50aWwgd2FybiB3aGlsZSB2YWx1ZXMgc2hpZnQgdGVsbGRpciBnZXRwd3VpZCBteSBnZXRwcm90b2J5bnVtYmVyIGRlbGV0ZSBhbmQgc29ydCB1YyBkZWZpbmVkIHNyYW5kIGFjY2VwdCBwYWNrYWdlIHNlZWtkaXIgZ2V0cHJvdG9ieW5hbWUgc2Vtb3Agb3VyIHJlbmFtZSBzZWVrIGlmIHF8MCBjaHJvb3Qgc3lzcmVhZCBzZXRwd2VudCBubyBjcnlwdCBnZXRjIGNob3duIHNxcnQgd3JpdGUgc2V0bmV0ZW50IHNldHByaW9yaXR5IGZvcmVhY2ggdGllIHNpbiBtc2dnZXQgbWFwIHN0YXQgZ2V0bG9naW4gdW5sZXNzIGVsc2lmIHRydW5jYXRlIGV4ZWMga2V5cyBnbG9iIHRpZWQgY2xvc2VkaXJpb2N0bCBzb2NrZXQgcmVhZGxpbmsgZXZhbCB4b3IgcmVhZGxpbmUgYmlubW9kZSBzZXRzZXJ2ZW50IGVvZiBvcmQgYmluZCBhbGFybSBwaXBlIGF0YW4yIGdldGdyZW50IGV4cCB0aW1lIHB1c2ggc2V0Z3JlbnQgZ3QgbHQgb3IgbmUgbXwwIGJyZWFrIGdpdmVuIHNheSBzdGF0ZSB3aGVuXCIscj17Y046XCJzdWJzdFwiLGI6XCJbJEBdXFxcXHtcIixlOlwiXFxcXH1cIixrOnR9LHM9e2I6XCItPntcIixlOlwifVwifSxuPXtjTjpcInZhcmlhYmxlXCIsdjpbe2I6L1xcJFxcZC99LHtiOi9bXFwkJUBdKFxcXlxcd1xcYnwjXFx3Kyg6OlxcdyspKnx7XFx3K318XFx3Kyg6OlxcdyopKikvfSx7YjovW1xcJCVAXVteXFxzXFx3e10vLHI6MH1dfSxpPWUuQyhcIl4oX19FTkRfX3xfX0RBVEFfXylcIixcIlxcXFxuJFwiLHtyOjV9KSxvPVtlLkJFLHIsbl0sYT1bbixlLkhDTSxpLGUuQyhcIl5cXFxcPVxcXFx3XCIsXCJcXFxcPWN1dFwiLHtlVzohMH0pLHMse2NOOlwic3RyaW5nXCIsYzpvLHY6W3tiOlwicVtxd3hyXT9cXFxccypcXFxcKFwiLGU6XCJcXFxcKVwiLHI6NX0se2I6XCJxW3F3eHJdP1xcXFxzKlxcXFxbXCIsZTpcIlxcXFxdXCIscjo1fSx7YjpcInFbcXd4cl0/XFxcXHMqXFxcXHtcIixlOlwiXFxcXH1cIixyOjV9LHtiOlwicVtxd3hyXT9cXFxccypcXFxcfFwiLGU6XCJcXFxcfFwiLHI6NX0se2I6XCJxW3F3eHJdP1xcXFxzKlxcXFw8XCIsZTpcIlxcXFw+XCIscjo1fSx7YjpcInF3XFxcXHMrcVwiLGU6XCJxXCIscjo1fSx7YjpcIidcIixlOlwiJ1wiLGM6W2UuQkVdfSx7YjonXCInLGU6J1wiJ30se2I6XCJgXCIsZTpcImBcIixjOltlLkJFXX0se2I6XCJ7XFxcXHcrfVwiLGM6W10scjowfSx7YjpcIi0/XFxcXHcrXFxcXHMqXFxcXD1cXFxcPlwiLGM6W10scjowfV19LHtjTjpcIm51bWJlclwiLGI6XCIoXFxcXGIwWzAtN19dKyl8KFxcXFxiMHhbMC05YS1mQS1GX10rKXwoXFxcXGJbMS05XVswLTlfXSooXFxcXC5bMC05X10rKT8pfFswX11cXFxcYlwiLHI6MH0se2I6XCIoXFxcXC9cXFxcL3xcIitlLlJTUitcInxcXFxcYihzcGxpdHxyZXR1cm58cHJpbnR8cmV2ZXJzZXxncmVwKVxcXFxiKVxcXFxzKlwiLGs6XCJzcGxpdCByZXR1cm4gcHJpbnQgcmV2ZXJzZSBncmVwXCIscjowLGM6W2UuSENNLGkse2NOOlwicmVnZXhwXCIsYjpcIihzfHRyfHkpLyhcXFxcXFxcXC58W14vXSkqLyhcXFxcXFxcXC58W14vXSkqL1thLXpdKlwiLHI6MTB9LHtjTjpcInJlZ2V4cFwiLGI6XCIobXxxcik/L1wiLGU6XCIvW2Etel0qXCIsYzpbZS5CRV0scjowfV19LHtjTjpcInN1YlwiLGJLOlwic3ViXCIsZTpcIihcXFxccypcXFxcKC4qP1xcXFwpKT9bO3tdXCIscjo1fSx7Y046XCJvcGVyYXRvclwiLGI6XCItXFxcXHdcXFxcYlwiLHI6MH1dO3JldHVybiByLmM9YSxzLmM9YSx7YWxpYXNlczpbXCJwbFwiXSxrOnQsYzphfX0pOyIsIkhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoXCJ0eXBlSWNvblwiLCBmdW5jdGlvbih0eXBlKSB7XG5cdHZhciBpbWdTcmMgPSAnJztcblx0c3dpdGNoKHR5cGUpe1xuXHRcdGNhc2UgJ2Jsb2cnOlxuXHRcdFx0aW1nU3JjID0gJ2ltYWdlcy9ibG9nLW1lbnUtaWNvbi1zbS5wbmcnO1xuXHRcdFx0YnJlYWs7IFxuXHRcdGNhc2UgJ3Byb2plY3QnOlxuXHRcdFx0aW1nU3JjID0gJ2ltYWdlcy9wcm9qZWN0LW1lbnUtaWNvbi1zbS5wbmcnO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZGVzaWduJzpcblx0XHRcdGltZ1NyYyA9ICdpbWFnZXMvZGVzaWduLW1lbnUtaWNvbi1zbS5wbmcnO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZXhwZXJpbWVudCc6XG5cdFx0XHRpbWdTcmMgPSAnaW1hZ2VzL2V4cGVyaW1lbnQtbWVudS1pY29uLXNtLnBuZyc7XG5cdFx0XHRicmVhaztcblx0fSBcblx0cmV0dXJuICc8aW1nIHNyYz1cIicraW1nU3JjKydcIiAvPic7XG59KTtcblxuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImdldEh0bWxQYXRoXCIsIGZ1bmN0aW9uKHJhd1BhdGgpIHtcblx0cmV0dXJuIHJhd1BhdGguc3Vic3RyKDAsIHJhd1BhdGgubGFzdEluZGV4T2YoJy4nKSkrJy5odG1sJztcbn0pO1xuXG5IYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKFwiZ2V0SW1hZ2VVcmxcIiwgZnVuY3Rpb24ocmF3UGF0aCkge1xuXHRmb3IodmFyIGk9MDsgaTxyYXdQYXRoLmxlbmd0aDsgaSsrKXtcblx0XHRpZihyYXdQYXRoW2ldICE9PSAnLicgJiYgcmF3UGF0aFtpXSAhPT0gJy8nKXtcblx0XHRcdHJldHVybiAnaHR0cDovL2NyYXlvbmJ5dGVzLnVzLycrXG5cdFx0XHRcdHJhd1BhdGguc3Vic3RyKGkscmF3UGF0aC5sZW5ndGgpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gJyc7XG59KTsiLCIoZnVuY3Rpb24oJCl7XG5cdCQod2luZG93KS5sb2FkKGZ1bmN0aW9uKCl7XG5cblx0dmFyIGNvb3JkX20gPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgY29vcmRpbmF0ZXMgPSBbXSxcblx0XHRcdGNhcmRzUGVyUm93ID0gMCxcblx0XHRcdGNhcmRXaWR0aCA9IDM1MCxcblx0XHRcdGNhcmRIZWlnaHQgPSAzMDAsXG5cdFx0XHRtYXJnaW4gPSAyMCwgXG5cdFx0XHR1cGRhdGVBcmVhID0gJCgnLmpzLWhvbWUtY29udGVudCcpLFxuXHRcdFx0d2luID0gJCgnLm1haW4tY29udGVudCcpO1xuXG5cdFx0dmFyIGFkanVzdEFyZWEgPSBmdW5jdGlvbihub09mQ2FyZHMsIGNhcmRzUGVyUm93KXtcblx0XHRcdHZhciBsYXN0Um93VG9wID0gY29vcmRpbmF0ZXNbbm9PZkNhcmRzLTFdLnRvcCArIGNhcmRIZWlnaHQgKyAyMDtcblx0XHRcdHVwZGF0ZUFyZWEuaGVpZ2h0KGxhc3RSb3dUb3ApO1xuXHRcdFx0dmFyIGNhcmRzV2lkdGggPSBjYXJkc1BlclJvdyooY2FyZFdpZHRoK21hcmdpbik9PT0wPzM1MDpjYXJkc1BlclJvdyooY2FyZFdpZHRoK21hcmdpbik7XG5cdFx0XHR2YXIgZXh0cmFTcGFjZSA9IHdpbi53aWR0aCgpLWNhcmRzV2lkdGg7XG5cdFx0XHRpZihleHRyYVNwYWNlID4gMCl7XG5cdFx0XHRcdHZhciBhcmVhTWFyZ2luID0gKGV4dHJhU3BhY2UpLzI7XG5cdFx0XHRcdHVwZGF0ZUFyZWEuY3NzKCdtYXJnaW4tbGVmdCcsIGFyZWFNYXJnaW4rJ3B4Jyk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBpbml0aWFsaXplID0gZnVuY3Rpb24obm9PZkNhcmRzKXtcblx0XHRcdGNvb3JkaW5hdGVzID0gW107XG5cdFx0XHRjYXJkc1BlclJvdyA9IE1hdGguZmxvb3Iod2luLndpZHRoKCkvKGNhcmRXaWR0aCArIG1hcmdpbikpPT09MD8xOk1hdGguZmxvb3Iod2luLndpZHRoKCkvKGNhcmRXaWR0aCArIG1hcmdpbikpO1xuXHRcdFx0Zm9yKHZhciBpPTA7IGk8bm9PZkNhcmRzOyBpKyspe1xuXHRcdFx0XHR2YXIgY29vcmQgPSB7dG9wOiAwLCBsZWZ0OiAwfTtcblx0XHRcdFx0Y29vcmQudG9wID0gTWF0aC5mbG9vcihpL2NhcmRzUGVyUm93KSAqIChjYXJkSGVpZ2h0ICsgbWFyZ2luKTtcblx0XHRcdFx0Y29vcmQubGVmdCA9IChpJWNhcmRzUGVyUm93KSAqIChjYXJkV2lkdGggKyBtYXJnaW4pO1xuXHRcdFx0XHRjb29yZGluYXRlcy5wdXNoKGNvb3JkKTtcblx0XHRcdH1cblx0XHRcdGFkanVzdEFyZWEobm9PZkNhcmRzLCBjYXJkc1BlclJvdyk7XG5cdFx0XHRyZXR1cm4gY29vcmRpbmF0ZXM7XG5cdFx0fTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRnZXQ6IGluaXRpYWxpemVcblx0XHR9O1xuXHR9KSgpO1xuXG5cdHZhciBmaWx0ZXJfbSA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBhbGxEYXRhID0gW10sIGZpbHRlcmVkID0gW107XG5cdFx0XG5cdFx0dmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRcdGFsbERhdGEgPSBkYXRhO1xuXHRcdFx0YWRkSGFuZGxlcnMoKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gaGlnaGxpZ2h0KGRvbSl7XG5cdFx0XHQkKCcubWFpbi1tZW51X19saW5rJykuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0XHQkKHRoaXMpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdH0pO1xuXHRcdFx0ZG9tLmFkZENsYXNzKCdhY3RpdmUnKTtcblx0XHR9XG5cblx0XHR2YXIgYWRkSGFuZGxlcnMgPSBmdW5jdGlvbigpe1xuXHRcdFx0JCgnLmpzLWJsb2ctbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGhpZ2hsaWdodCgkKHRoaXMpKTtcblx0XHRcdFx0ZmlsdGVyKCdibG9nJyk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuXHRcdFx0JCgnLmpzLXByb2plY3QtbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGhpZ2hsaWdodCgkKHRoaXMpKTtcblx0XHRcdFx0ZmlsdGVyKCdwcm9qZWN0Jyk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0pO1xuXHRcdFx0JCgnLmpzLWRlc2lnbi1saW5rJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcblx0XHRcdFx0aGlnaGxpZ2h0KCQodGhpcykpO1xuXHRcdFx0XHRmaWx0ZXIoJ2Rlc2lnbicpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9KTtcblx0XHRcdCQoJy5qcy1hbGwtbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGhpZ2hsaWdodCgkKHRoaXMpKTtcblx0XHRcdFx0c2hvd0FsbCgpO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0dmFyIHNob3dBbGwgPSBmdW5jdGlvbigpe1xuXHRcdFx0JCgnLnVwZGF0ZS1jYXJkJykuZWFjaChmdW5jdGlvbigpe1xuXHRcdFx0XHQkKHRoaXMpLmFkZENsYXNzKCdzaG93bicpO1xuXHRcdFx0fSk7XG5cdFx0XHRjb250ZW50X20uYWRqdXN0KCk7XG5cdFx0fTtcblxuXHRcdHZhciBmaWx0ZXIgPSBmdW5jdGlvbih0eXBlKXtcblx0XHRcdGNvbnNvbGUubG9nKCdmaWx0ZXJpbmcuLi4nKTtcblx0XHRcdGZpbHRlcmVkID0gXy5maWx0ZXIoYWxsRGF0YSwgZnVuY3Rpb24odmFsdWUpe1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUudHlwZSAhPSB0eXBlO1xuXHRcdFx0fSk7XG5cdFx0XHRjb25zb2xlLmxvZyhmaWx0ZXJlZC5sZW5ndGgpO1xuXHRcdFx0Ly9zaG93IGV2ZXJ5dGhpbmcgZmlyc3Rcblx0XHRcdCQoJy51cGRhdGUtY2FyZCcpLmVhY2goZnVuY3Rpb24oKXtcblx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnc2hvd24nKTtcblx0XHRcdH0pO1xuXHRcdFx0Y29udGVudF9tLmFkanVzdCgpO1xuXHRcdFx0Zm9yKHZhciBpPWZpbHRlcmVkLmxlbmd0aC0xOyBpPj0wOyBpLS0pe1xuXHRcdFx0XHQkKCcudXBkYXRlLWNhcmQuc2hvd24nKVxuXHRcdFx0XHRcdC5lcShfLmZpbmRJbmRleChhbGxEYXRhLCBmaWx0ZXJlZFtpXSkpXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoJ3Nob3duJyk7XG5cdFx0XHR9XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGNvbnRlbnRfbS5hZGp1c3QoKTtcblx0XHRcdH0sIDIwMCk7XG5cdFx0fTtcblxuXHRcdHJldHVybntcblx0XHRcdGluaXQ6IGluaXRpYWxpemVcblx0XHR9O1xuXHR9KSgpO1xuXG5cblx0dmFyIGNvbnRlbnRfbSA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBkYXRhID0gW10sIC8vZGF0YSBmb3IgZWFjaCBjYXJkXG5cdFx0XHRjb29yZGluYXRlcyA9IFtdLFxuXHRcdFx0Y29udGVudEFyZWEgPSAkKCcuanMtaG9tZS1jb250ZW50Jyk7XG5cblx0XHR2YXIgYWRkSGFuZGxlcnMgPSBmdW5jdGlvbigpe1xuXHRcdFx0JCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpe1xuXHRcdFx0XHRhZGp1c3RDb29yZHMoKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR2YXIgcmVhZCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHQkLmdldEpTT04oJ2NvbnRlbnQvYWxsTWQuanNvbicsIGZ1bmN0aW9uKCBmZXRjaGVkX2RhdGEgKXtcblx0XHRcdFx0ZGF0YSA9IGZldGNoZWRfZGF0YTtcblx0XHRcdFx0ZGF0YSA9IF8uc29ydEJ5KGRhdGEsIGZ1bmN0aW9uKG4pe1xuXHRcdFx0XHRcdHZhciBjZGF0ZSA9IG1vbWVudChuLmNyZWF0ZURhdGUpO1xuXHRcdFx0XHRcdG4ucHJldHR5RGF0ZSA9IGNkYXRlLmNhbGVuZGFyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIC1jZGF0ZS52YWx1ZU9mKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZW5kZXJBbGxDYXJkcygpO1xuXHRcdFx0XHRmaWx0ZXJfbS5pbml0KGRhdGEpO1x0XHRcdFx0XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0dmFyIGFkanVzdENvb3JkcyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRjb29yZGluYXRlcyA9IGNvb3JkX20uZ2V0KGRhdGEubGVuZ3RoKTtcblx0XHRcdCQoJy51cGRhdGUtY2FyZC5zaG93bicpLmVhY2goZnVuY3Rpb24oaSl7XG5cdFx0XHRcdCQodGhpcykuY3NzKCd0b3AnLCBjb29yZGluYXRlc1tpXS50b3ArJ3B4Jyk7XG5cdFx0XHRcdCQodGhpcykuY3NzKCdsZWZ0JywgY29vcmRpbmF0ZXNbaV0ubGVmdCsncHgnKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR2YXIgcmVuZGVyQ2FyZCA9IGZ1bmN0aW9uKGNEYXRhKXtcblx0XHRcdGNvbnRlbnRBcmVhLmFwcGVuZChwQXBwLnRlbXBsYXRlcy5jYXJkKGNEYXRhKSk7XG5cdFx0fTtcblxuXHRcdHZhciByZW5kZXJBbGxDYXJkcyA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRjb25zb2xlLmxvZygncmVuZGVyaW5nLi4uJyk7XG5cdFx0XHRfLmZvckVhY2goZGF0YSwgZnVuY3Rpb24odmFsdWUsIGtleSl7XG5cdFx0XHRcdHJlbmRlckNhcmQodmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0XHRhZGp1c3RDb29yZHMoKTtcblx0XHR9O1xuXG5cdFx0dmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpe1xuXHRcdFx0Ly9nZXQgYWxsIGNvbnRlbnQuIFRoZXkgd2lsbCBiZSBpbiBtZW1vcnlcblx0XHRcdC8vZnJvbSBoZXJlIG9uLlxuXHRcdFx0cmVhZCgpO1xuXHRcdFx0YWRkSGFuZGxlcnMoKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGluaXQ6IGluaXRpYWxpemUsXG5cdFx0XHRhZGp1c3Q6IGFkanVzdENvb3Jkc1xuXHRcdH07XG5cdH0pKCk7XG5cblx0dmFyIHAgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuXHR2YXIgZmlsZW5hbWUgPSBwW3AubGVuZ3RoLTFdO1xuXHRpZighZmlsZW5hbWUgfHwgZmlsZW5hbWUgPT09IFwiaW5kZXguaHRtbFwiKVxuXHRcdGNvbnRlbnRfbS5pbml0KCk7XG5cbn0pO1xuXG59KShqUXVlcnkpOyIsInRoaXNbXCJwQXBwXCJdID0gdGhpc1tcInBBcHBcIl0gfHwge307XG50aGlzW1wicEFwcFwiXVtcInRlbXBsYXRlc1wiXSA9IHRoaXNbXCJwQXBwXCJdW1widGVtcGxhdGVzXCJdIHx8IHt9O1xudGhpc1tcInBBcHBcIl1bXCJ0ZW1wbGF0ZXNcIl1bXCJjYXJkXCJdID0gSGFuZGxlYmFycy50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczI9dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9dGhpcy5sYW1iZGE7XG5cbiAgcmV0dXJuIFwiPGEgaHJlZj1cXFwiY29udGVudC9cIlxuICAgICsgYWxpYXMyKChoZWxwZXJzLmdldEh0bWxQYXRoIHx8IChkZXB0aDAgJiYgZGVwdGgwLmdldEh0bWxQYXRoKSB8fCBhbGlhczEpLmNhbGwoZGVwdGgwLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYXRoIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJnZXRIdG1sUGF0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwidXBkYXRlLWNhcmQgc2hvd25cXFwiPlxcblx0PGRpdiBjbGFzcz1cXFwiY2FyZF9faGVhZGVyXFxcIj5cXG5cdFx0PGRpdiBjbGFzcz1cXFwiY2FyZF9faWNvblxcXCI+XFxuXHRcdFx0XCJcbiAgICArICgoc3RhY2sxID0gKGhlbHBlcnMudHlwZUljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAudHlwZUljb24pIHx8IGFsaWFzMSkuY2FsbChkZXB0aDAsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApLHtcIm5hbWVcIjpcInR5cGVJY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiXFxuXHRcdDwvZGl2Plxcblx0XHQ8cCBjbGFzcz1cXFwicHJldHR5LWRhdGVcXFwiPlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wcmV0dHlEYXRlIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC9wPlxcblx0PC9kaXY+XFxuXHQ8ZGl2IGNsYXNzPVxcXCJjYXJkX19pbWFnZS1ob2xkZXJcXFwiPlxcblx0XHQ8aW1nIHNyYz1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczMoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltZyA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgLz5cXG5cdDwvZGl2Plxcblx0PGRpdiBjbGFzcz1cXFwiY2FyZF9fZm9vdGVyXFxcIj5cXG5cdFx0PGRpdiBjbGFzcz1cXFwiY2FyZF9faW5mb1xcXCI+XFxuXHRcdFx0PGg1PlwiXG4gICAgKyBhbGlhczIoYWxpYXMzKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIjwvaDU+XFxuXHRcdFx0PHA+XCJcbiAgICArIGFsaWFzMihhbGlhczMoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRlc2NyaXB0aW9uIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC9wPlx0XFxuXHRcdDwvZGl2Plxcblx0PC9kaXY+XFxuXHRcXG48L2E+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=